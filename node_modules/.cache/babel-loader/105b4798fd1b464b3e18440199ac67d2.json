{"remainingRequest":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/babel-loader/lib/index.js!/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/components/module/h5canvas.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/components/module/h5canvas.vue","mtime":1599816203769},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/babel-loader/lib/index.js","mtime":1591149279866},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js","mtime":1592981491866}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["h5canvas.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <canvas class=\"h5_canvas\"></canvas>\n</template>\n<script>\nimport { debounce } from \"../../utils.js\";\nimport { fabric } from \"fabric\";\nconst PEN_URL =\n  \"https://img.vipkidstatic.com/beeschool/server/1594090400039/%E7%AC%94.png\";\n\nexport default {\n  props: {\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    },\n    mode: {\n      type: String,\n      default: \"\"\n    },\n    zIndex: {\n      type: Number,\n      default: 0\n    },\n    color: {\n      type: String,\n      default: \"red\"\n    },\n    item: {\n      type: Object,\n      default: () => {}\n    },\n    fc: {\n      type: Object\n    }\n  },\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      points: [],\n      canDraw: false,\n      priviousPressure: 0,\n      beginPoint: null,\n      endPoint: null,\n      baseLineList: [6, 10, 15, 25],\n      historyList: []\n    };\n  },\n  watch: {\n    mode(newVal) {\n      if (!this.ctx) return;\n      if (newVal === \"pencil\") {\n        this.ctx.globalCompositeOperation = \"source-over\";\n        this.canvas.style.cursor = `url(\"${PEN_URL}\") 2 16, auto`;\n        // this.canvas.setCursor(`url(\"${PENCIL_URL}\") 2 16, auto`);\n      }\n      if (newVal === \"eraser\") {\n        this.ctx.globalCompositeOperation = \"destination-out\";\n        this.canvas.style.cursor = \"wait\";\n      }\n    }\n  },\n  mounted() {\n    if (!this.width || !this.height) return;\n    this.canvas = document.querySelector(\".h5_canvas\");\n    // console.log(this.canvas, this.width);\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.canvas.style.cursor = `url(\"${PEN_URL}\") 2 16, auto`;\n    this.ctx = this.canvas.getContext(\"2d\");\n    // console.log(\"...\", this.canvas, this.ctx);\n    this.ctx.globalCompositeOperation = \"source-over\";\n    this.ctx.lineCap = \"round\"; //设置线条的结束端点样式\n    this.ctx.lineJion = \"round\"; //设置两条线相交时，所创建的拐角类型\n    this.ctx.strokeStyle = this.color; // 线条颜色\n\n    // 注册事件\n    this.canvas.addEventListener(\n      \"pointerdown\",\n      (e) => {\n        // if (this.mode === \"eraser\") {\n        //   this.eraser(e);\n        // } else {\n        this.handledown(e);\n        // }\n      },\n      false\n    );\n    this.canvas.addEventListener(\n      \"pointerup\",\n      (e) => {\n        this.handleUp(e);\n        // this.debounceMethod(this);\n        // this.item.save(\"h5\", this.saveImageData());\n      },\n      false\n    );\n    this.canvas.addEventListener(\n      \"pointermove\",\n      (e) => {\n        this.handleMove(e);\n      },\n      false\n    );\n    this.canvas.addEventListener(\n      \"pointerleave\",\n      (e) => {\n        // if (this.mode === \"eraser\") {\n        // this.eraser(e);\n        // } else {\n        this.handleUp(e);\n        // this.saveImageData(\"llll\");\n        // }\n      },\n      false\n    );\n  },\n  methods: {\n    debounceMethod: debounce((that) => {\n      // 防抖\n      that.item.save(\"h5\", that.saveImageData());\n    }, 2000),\n    handleUp(e) {\n      if (!this.canDraw) return;\n      const { x, y, pressure } = this.getPos(e);\n      this.priviousPressure = pressure;\n      // this.points.push({ x, y });\n      this.points.push({ x, y, command: \"L\" });\n      if (this.points.length > 3) {\n        const lastTwoPoints = this.points.slice(-2);\n        const controlPoint = lastTwoPoints[0];\n        const endPoint = {\n          x: (lastTwoPoints[0].x + lastTwoPoints[1].x) / 2,\n          y: (lastTwoPoints[0].y + lastTwoPoints[1].y) / 2\n        };\n        this.drawPath(\n          this.beginPoint,\n          controlPoint,\n          endPoint,\n          ((this.priviousPressure + pressure) / 2) * this.baseLineList[0]\n        );\n        this.beginPoint = endPoint;\n      } else {\n        this.priviousPressure = pressure;\n      }\n      this.beginPoint = null;\n      this.canDraw = false;\n      this.points = [];\n    },\n    handledown(e) {\n      this.canDraw = true;\n      const { x, y, pressure } = this.getPos(e);\n      this.priviousPressure = pressure;\n      // this.points.push({ x, y });\n      this.points.push({ x, y, command: \"M\" });\n      this.beginPoint = { x, y };\n    },\n    handleMove(e) {\n      if (!this.canDraw) return;\n      const { x, y, pressure } = this.getPos(e);\n      this.priviousPressure = pressure;\n      // this.points.push({ x, y });\n      this.points.push({ x, y, command: \"L\" });\n      if (this.points.length > 3) {\n        const lastTwoPoints = this.points.slice(-2);\n        const controlPoint = lastTwoPoints[0];\n        const endPoint = {\n          x: (lastTwoPoints[0].x + lastTwoPoints[1].x) / 2,\n          y: (lastTwoPoints[0].y + lastTwoPoints[1].y) / 2\n        };\n        this.drawPath(\n          this.beginPoint,\n          controlPoint,\n          endPoint,\n          pressure * this.baseLineList[0]\n        );\n        this.beginPoint = endPoint;\n      }\n    },\n    getPos(e) {\n      const { pressure } = e;\n      return {\n        x: e.layerX,\n        y: e.layerY,\n        pressure\n      };\n    },\n    drawPath(beginPoint, controlPoint, endPoint, width) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(beginPoint.x, beginPoint.y);\n      this.ctx.quadraticCurveTo(\n        controlPoint.x,\n        controlPoint.y,\n        endPoint.x,\n        endPoint.y\n      );\n      if (this.mode === \"eraser\") {\n        width = 15;\n        this.ctx.strokeStyle = \"#FFF\";\n      }\n      this.ctx.lineWidth = width;\n      this.ctx.stroke();\n      this.ctx.closePath();\n      let p = this.pathToCurve(this.points);\n      var path = new fabric.Path(p, {\n        fill: null,\n        stroke: this.color,\n        strokeWidth: width,\n        strokeLineCap: \"round\",\n        strokeLineJoin: \"round\",\n        evented: false,\n        hasControls: false,\n        hasBorders: false,\n        selectable: true,\n        isDrawingMode: false\n        // strokeStyle\n      });\n      this.fc.add(path);\n    },\n    saveImageData() {\n      let imgData = this.ctx.getImageData(\n        0,\n        0,\n        this.canvas.width,\n        this.canvas.height\n      );\n      return imgData;\n    },\n    putImageData(data) {\n      this.ctx.putImageData(data, 0, 0);\n    },\n    export() {\n      return this.canvas.toDataURL(\"image/jpeg\", 1.0);\n      // console.log(\"p\", p);\n    },\n    pathToCurve(path, controlPointsNum = 2) {\n      // M 开始 L 结束\n      let support = [\"M\", \"L\"];\n      let curve = { 2: \"Q\", 3: \"C\" };\n      let str = \"\";\n      for (let i = 0; i < path.length; i++) {\n        let { command, x, y } = path[i];\n        if (!support.includes(command)) {\n          throw new Error(`${command} is not support width start`);\n        }\n        if (i % controlPointsNum === 0) {\n          // 剩余点数不够组成曲线时使用L\n          let cmd =\n            i + controlPointsNum <= path.length ? curve[controlPointsNum] : \"L\";\n          str += ` ${cmd} ${x} ${y}`;\n        } else {\n          str += ` ${x} ${y}`;\n        }\n      }\n      return str;\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.h5_canvas {\n  // position: absolute;\n  border: 1px solid green;\n  top: 0;\n}\n</style>\n"],"sourceRoot":"src/components/module"}]}