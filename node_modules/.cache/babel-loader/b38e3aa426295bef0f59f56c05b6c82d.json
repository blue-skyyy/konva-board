{"remainingRequest":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/babel-loader/lib/index.js!/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue","mtime":1600740202357},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/babel-loader/lib/index.js","mtime":1591149279866},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js","mtime":1592981491866}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IEtvbnZhIGZyb20gImtvbnZhIjsKaW1wb3J0IHsgaW1hZ2VMaXN0IH0gZnJvbSAiLi91dGlsLmpzIjsKaW1wb3J0IEl0ZW0gZnJvbSAiLi9JdGVtLmpzIjsKdmFyIG1ldGhvZHMgPSB7CiAgc2F2ZUN1cnJJdGVtU3RhdGU6IGZ1bmN0aW9uIHNhdmVDdXJySXRlbVN0YXRlKCkgewogICAgaWYgKCF0aGlzLmN1cnJJdGVtKSByZXR1cm47CiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YWdlLnRvSlNPTigpOwogICAgY29uc29sZS5sb2coInN0YXRlIiwgc3RhdGUpOwogICAgdGhpcy5jdXJySXRlbS5zYXZlKHN0YXRlKTsKICB9LAogIGluaXRGcmVlRHJhd0NhbnZhczogZnVuY3Rpb24gaW5pdEZyZWVEcmF3Q2FudmFzKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB2YXIgbGF5ZXIgPSBuZXcgS29udmEuTGF5ZXIoe30pOwogICAgdGhpcy5mcmVlRHJhd0xheWVyID0gbGF5ZXI7CiAgICB0aGlzLnN0YWdlLmFkZChsYXllcik7CiAgICBsYXllci56SW5kZXgoOTkpOwogICAgY29uc29sZS5sb2coIj09PT09PSIsIGxheWVyLnpJbmRleCgpKTsKICAgIHZhciBpc1BhaW50ID0gZmFsc2U7CiAgICB2YXIgbW9kZSA9ICJicnVzaCI7CiAgICB2YXIgbGFzdExpbmU7CiAgICB0aGlzLnN0YWdlLm9uKCJtb3VzZWRvd24gdG91Y2hzdGFydCIsIGZ1bmN0aW9uICgpIHsKICAgICAgaXNQYWludCA9IHRydWU7CgogICAgICB2YXIgcG9zID0gX3RoaXMuc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCk7CgogICAgICBsYXN0TGluZSA9IG5ldyBLb252YS5MaW5lKHsKICAgICAgICBzdHJva2U6ICIjZGY0YjI2IiwKICAgICAgICBzdHJva2VXaWR0aDogNSwKICAgICAgICBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb246IG1vZGUgPT09ICJicnVzaCIgPyAic291cmNlLW92ZXIiIDogImRlc3RpbmF0aW9uLW91dCIsCiAgICAgICAgcG9pbnRzOiBbcG9zLngsIHBvcy55XQogICAgICB9KTsKICAgICAgbGF5ZXIuYWRkKGxhc3RMaW5lKTsKICAgIH0pOwogICAgdGhpcy5zdGFnZS5vbigibW91c2V1cCB0b3VjaGVuZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgaXNQYWludCA9IGZhbHNlOwogICAgfSk7CiAgICB0aGlzLnN0YWdlLm9uKCJtb3VzZW1vdmUgdG91Y2htb3ZlIiwgZnVuY3Rpb24gKCkgewogICAgICBpZiAoIWlzUGFpbnQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBwb3MgPSBfdGhpcy5zdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKTsKCiAgICAgIHZhciBuZXdQb2ludHMgPSBsYXN0TGluZS5wb2ludHMoKS5jb25jYXQoW3Bvcy54LCBwb3MueV0pOwogICAgICBsYXN0TGluZS5wb2ludHMobmV3UG9pbnRzKTsKICAgICAgbGF5ZXIuYmF0Y2hEcmF3KCk7CiAgICB9KTsKICAgIHZhciBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidG9vbCIpOwogICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgbW9kZSA9IHNlbGVjdC52YWx1ZTsKICAgIH0pOwogIH0sCiAgdG9OZXh0OiBmdW5jdGlvbiB0b05leHQoKSB7CiAgICB0aGlzLnNhdmVDdXJySXRlbVN0YXRlKCk7CiAgICB0aGlzLmN1cnJJbmRleCArPSAxOwogICAgdGhpcy5zd2l0Y2hJbWFnZSh0aGlzLmN1cnJJbmRleCk7CiAgfSwKICB0b1ByZXY6IGZ1bmN0aW9uIHRvUHJldigpIHsKICAgIHRoaXMuY3VyckluZGV4IC09IDE7CiAgICB0aGlzLnN3aXRjaEltYWdlKHRoaXMuY3VyckluZGV4KTsKICB9LAogIHRvRGF0YVVybDogZnVuY3Rpb24gdG9EYXRhVXJsKCkgewogICAgdGhpcy5pbWdVcmwgPSB0aGlzLnN0YWdlLnRvRGF0YVVSTCh7CiAgICAgIHg6IDAsCiAgICAgIHk6IDAsCiAgICAgIHdpZHRoOiA2MDAsCiAgICAgIGhlaWdodDogNDAwLAogICAgICBwaXhlbFJhdGlvOiAzCiAgICB9KTsKICB9LAogIC8vIOWKoOi9veiDjOaZrwogIGxvYWRCYWNrSW1hZ2U6IGZ1bmN0aW9uIGxvYWRCYWNrSW1hZ2UoaXRlbU9iaiwgY2IpIHsKICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgIGNvbnNvbGUubG9nKCJpdGVtT2JqIiwgaXRlbU9iaik7CiAgICB2YXIgaW1hZ2VJbmZvID0gaXRlbU9iai5pbWFnZUluZm87CiAgICB2YXIgc2NhbGUgPSBpbWFnZUluZm8uc2NhbGU7CiAgICBLb252YS5JbWFnZS5mcm9tVVJMKGl0ZW1PYmoub3JpZ2luVXJsLCBmdW5jdGlvbiAoa0ltZykgewogICAgICBrSW1nLnNldEF0dHJzKHsKICAgICAgICAvLyDorr7nva7lsYXkuK0KICAgICAgICB4OiAoX3RoaXMyLmNvbldILndpZHRoIC0gc2NhbGUud2lkdGgpIC8gMiwKICAgICAgICB5OiAoX3RoaXMyLmNvbldILmhlaWdodCAtIHNjYWxlLmhlaWdodCkgLyAyLAogICAgICAgIHdpZHRoOiBzY2FsZS53aWR0aCwKICAgICAgICBoZWlnaHQ6IHNjYWxlLmhlaWdodAogICAgICB9KTsKCiAgICAgIF90aGlzMi5iZ0ltZ0xheWVyLmFkZChrSW1nKTsKCiAgICAgIF90aGlzMi5iZ0ltZ0xheWVyLmJhdGNoRHJhdygpOwoKICAgICAgY29uc29sZS5sb2coImNiIiwgY2IpOyAvLyBjYiAmJiBjYigpOwogICAgfSk7CiAgfSwKICBhZnRlclN3aXRjaDogZnVuY3Rpb24gYWZ0ZXJTd2l0Y2goaW5kZXgsIGl0ZW1PYmopIHsKICAgIHZhciBpc0ZpcnN0UmVuZGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCiAgICBpZiAoaXNGaXJzdFJlbmRlcikgewogICAgICAvLyDpppbmrKHmuLLmn5M7CiAgICAgIGlmICghdGhpcy5iZ0ltZ0xheWVyKSB7CiAgICAgICAgdmFyIGJnSW1nTGF5ZXIgPSBuZXcgS29udmEuTGF5ZXIoKTsKICAgICAgICB0aGlzLmJnSW1nTGF5ZXIgPSBiZ0ltZ0xheWVyOwogICAgICAgIHRoaXMubG9hZEJhY2tJbWFnZShpdGVtT2JqLCB0aGlzLmluaXRGcmVlRHJhd0NhbnZhcyk7CiAgICAgICAgdGhpcy5zdGFnZS5hZGQoYmdJbWdMYXllcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5iZ0ltZ0xheWVyICYmIHRoaXMuYmdJbWdMYXllci5yZW1vdmVDaGlsZHJlbigpOwogICAgICAgIHRoaXMubG9hZEJhY2tJbWFnZShpdGVtT2JqKTsKICAgICAgfQoKICAgICAgdGhpcy5jbGVhckZyZWVEcmF3TGF5ZXIoKTsKICAgIH0KICB9LAogIC8vIOa4hemZpOeUu+eslOWxggogIGNsZWFyRnJlZURyYXdMYXllcjogZnVuY3Rpb24gY2xlYXJGcmVlRHJhd0xheWVyKCkgewogICAgaWYgKHRoaXMuZnJlZURyYXdMYXllcikgewogICAgICB0aGlzLmZyZWVEcmF3TGF5ZXIucmVtb3ZlQ2hpbGRyZW4oKTsKICAgICAgdGhpcy5mcmVlRHJhd0xheWVyLmRyYXcoKTsKICAgIH0KICB9LAogIHN3aXRjaEltYWdlOiBmdW5jdGlvbiBzd2l0Y2hJbWFnZShpbmRleCkgewogICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgaWYgKGluZGV4IDwgLTEpIHJldHVybjsKICAgIHZhciBpbWcgPSB0aGlzLmltYWdlTGlzdFtpbmRleF07CiAgICBpZiAoIWltZykgcmV0dXJuOwogICAgdmFyIGl0ZW1PYmo7CgogICAgaWYgKGltZyAmJiAhaW1nLmlzUmVuZGVyKSB7CiAgICAgIC8vIOmmluasoea4suafkwogICAgICBpdGVtT2JqID0gbmV3IEl0ZW0oewogICAgICAgIHVybDogdGhpcy5pbWFnZUxpc3RbaW5kZXhdLnVybCwKICAgICAgICBjb25XSDogewogICAgICAgICAgd2lkdGg6IDgwMCwKICAgICAgICAgIGhlaWdodDogNjAwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMy5hZnRlclN3aXRjaChpbmRleCwgaXRlbU9iaiwgdHJ1ZSk7CiAgICAgIH0pOwogICAgICB0aGlzLmN1cnJJdGVtID0gaXRlbU9iajsKICAgICAgdGhpcy5pdGVtTGlzdFt0aGlzLmN1cnJJbmRleF0gPSBpdGVtT2JqOwogICAgICB0aGlzLmltYWdlTGlzdFt0aGlzLmN1cnJJbmRleF0uaXNSZW5kZXIgPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgLy8g6Z2e6aaW5qyh5riy5p+TCiAgICAgIHRoaXMuY3Vyckl0ZW0gPSB0aGlzLml0ZW1MaXN0W3RoaXMuY3VyckluZGV4XTsKICAgICAgdmFyIGN1cnJTdGF0ZSA9IHRoaXMuY3Vyckl0ZW0uZ2V0Q3VyclN0YXRlKCk7CiAgICAgIGNvbnNvbGUubG9nKCJKU09OLnBhcnNlKGN1cnJTdGF0ZSkiLCBKU09OLnBhcnNlKGN1cnJTdGF0ZSkpOwogICAgICB0aGlzLnN0YWdlID0gS29udmEuTm9kZS5jcmVhdGUoSlNPTi5wYXJzZShjdXJyU3RhdGUpLCAiaW1hZ2UtY2FudmFzIik7IC8vIHRoaXMuc3RhZ2UuZm9yRWFjaCgoZCkgPT4gewogICAgICAvLyAgIGNvbnNvbGUubG9nKCJkIiwgZCk7CiAgICAgIC8vIH0pOwoKICAgICAgdGhpcy5iZ0ltZ0xheWVyLmJhdGNoRHJhdygpOyAvLyB0aGlzLmZyZWVEcmF3TGF5ZXIuYmF0Y2hEcmF3KCk7CiAgICAgIC8vIHRoaXMuZnJlZURyYXdMYXllci56SW5kZXgoOTkpOwogICAgfQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIG1ldGhvZHM6IG1ldGhvZHMsCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIC8vIGZpcnN0IHdlIG5lZWQgS29udmEgY29yZSB0aGluZ3M6IHN0YWdlIGFuZCBsYXllcgogICAgdmFyIHN0YWdlID0gbmV3IEtvbnZhLlN0YWdlKHsKICAgICAgY29udGFpbmVyOiAiaW1hZ2UtY2FudmFzIiwKICAgICAgLy8g56Gu5a6a5LqGY2FudmFz55qE5a696auYCiAgICAgIHdpZHRoOiA4MDAsCiAgICAgIGhlaWdodDogNjAwCiAgICB9KTsKICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTsgLy8g57uE6KOF5pWw5o2u5qC85byPCgogICAgdGhpcy5pbWFnZUxpc3QgPSB0aGlzLmltYWdlTGlzdC5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBpc1JlbmRlcjogZmFsc2UsCiAgICAgICAgdXJsOiBkCiAgICAgIH07CiAgICB9KTsKICAgIHRoaXMudG9OZXh0KCk7IC8vIHRoaXMuKCk7CiAgICAvLyDliJ3lp4vljJbml7blgJnpnIDopoHlvILmraUKICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge30sIDEwMCk7CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc3RhZ2U6IG51bGwsCiAgICAgIGltZ1VybDogbnVsbCwKICAgICAgaW1hZ2VMaXN0OiBpbWFnZUxpc3QsCiAgICAgIGN1cnJJbmRleDogLTEsCiAgICAgIGN1cnJJdGVtOiBudWxsLAogICAgICBpdGVtTGlzdDogW10sCiAgICAgIGNvbldIOiB7CiAgICAgICAgd2lkdGg6IDgwMCwKICAgICAgICBoZWlnaHQ6IDYwMAogICAgICB9LAogICAgICBmcmVlRHJhd0xheWVyOiBudWxsLAogICAgICBiZ0ltZ0xheWVyOiBudWxsCiAgICB9OwogIH0sCiAgY29tcG9uZW50czoge30KfTs="},{"version":3,"sources":["konva.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"image-decorator-wrap\">\n    <div id=\"image-canvas\"></div>\n\n    <select id=\"tool\">\n      <option value=\"brush\">Brush</option>\n      <option value=\"eraser\">Eraser</option>\n    </select>\n    <img :src=\"imgUrl\" class=\"img\" />\n    <button @click=\"toDataUrl\">点我下载</button>\n    <button @click=\"toNext\">下一张</button>\n    <button @click=\"toPrev\">上一张</button>\n    <!-- <button></button> -->\n  </div>\n</template>\n\n<script>\nimport Konva from \"konva\";\nimport { imageList } from \"./util.js\";\nimport Item from \"./Item.js\";\n\nconst methods = {\n  saveCurrItemState() {\n    if (!this.currItem) return;\n    let state = this.stage.toJSON();\n    console.log(\"state\", state);\n    this.currItem.save(state);\n  },\n  initFreeDrawCanvas() {\n    let layer = new Konva.Layer({});\n\n    this.freeDrawLayer = layer;\n    this.stage.add(layer);\n    layer.zIndex(99);\n    console.log(\"======\", layer.zIndex());\n    let isPaint = false;\n    let mode = \"brush\";\n    let lastLine;\n    this.stage.on(\"mousedown touchstart\", () => {\n      isPaint = true;\n      let pos = this.stage.getPointerPosition();\n      lastLine = new Konva.Line({\n        stroke: \"#df4b26\",\n        strokeWidth: 5,\n        globalCompositeOperation:\n          mode === \"brush\" ? \"source-over\" : \"destination-out\",\n        points: [pos.x, pos.y]\n      });\n      layer.add(lastLine);\n    });\n    this.stage.on(\"mouseup touchend\", () => {\n      isPaint = false;\n    });\n    this.stage.on(\"mousemove touchmove\", () => {\n      if (!isPaint) {\n        return;\n      }\n      const pos = this.stage.getPointerPosition();\n      let newPoints = lastLine.points().concat([pos.x, pos.y]);\n      lastLine.points(newPoints);\n      layer.batchDraw();\n    });\n    let select = document.getElementById(\"tool\");\n    select.addEventListener(\"change\", function() {\n      mode = select.value;\n    });\n  },\n  toNext() {\n    this.saveCurrItemState();\n\n    this.currIndex += 1;\n    this.switchImage(this.currIndex);\n  },\n  toPrev() {\n    this.currIndex -= 1;\n    this.switchImage(this.currIndex);\n  },\n  toDataUrl() {\n    this.imgUrl = this.stage.toDataURL({\n      x: 0,\n      y: 0,\n      width: 600,\n      height: 400,\n      pixelRatio: 3\n    });\n  },\n  // 加载背景\n  loadBackImage(itemObj, cb) {\n    console.log(\"itemObj\", itemObj);\n    const { imageInfo } = itemObj;\n    const { scale } = imageInfo;\n    Konva.Image.fromURL(itemObj.originUrl, (kImg) => {\n      kImg.setAttrs({\n        // 设置居中\n        x: (this.conWH.width - scale.width) / 2,\n        y: (this.conWH.height - scale.height) / 2,\n        width: scale.width,\n        height: scale.height\n      });\n      this.bgImgLayer.add(kImg);\n      this.bgImgLayer.batchDraw();\n      console.log(\"cb\", cb);\n      // cb && cb();\n    });\n  },\n  afterSwitch(index, itemObj, isFirstRender = false) {\n    if (isFirstRender) {\n      // 首次渲染;\n      if (!this.bgImgLayer) {\n        let bgImgLayer = new Konva.Layer();\n        this.bgImgLayer = bgImgLayer;\n        this.loadBackImage(itemObj, this.initFreeDrawCanvas);\n        this.stage.add(bgImgLayer);\n      } else {\n        this.bgImgLayer && this.bgImgLayer.removeChildren();\n        this.loadBackImage(itemObj);\n      }\n      this.clearFreeDrawLayer();\n    }\n  },\n  // 清除画笔层\n  clearFreeDrawLayer() {\n    if (this.freeDrawLayer) {\n      this.freeDrawLayer.removeChildren();\n      this.freeDrawLayer.draw();\n    }\n  },\n  switchImage(index) {\n    if (index < -1) return;\n    let img = this.imageList[index];\n    if (!img) return;\n    let itemObj;\n    if (img && !img.isRender) {\n      // 首次渲染\n      itemObj = new Item(\n        {\n          url: this.imageList[index].url,\n          conWH: { width: 800, height: 600 }\n        },\n        () => this.afterSwitch(index, itemObj, true)\n      );\n      this.currItem = itemObj;\n      this.itemList[this.currIndex] = itemObj;\n      this.imageList[this.currIndex].isRender = true;\n    } else {\n      // 非首次渲染\n      this.currItem = this.itemList[this.currIndex];\n      let currState = this.currItem.getCurrState();\n      console.log(\"JSON.parse(currState)\", JSON.parse(currState));\n      this.stage = Konva.Node.create(JSON.parse(currState), \"image-canvas\");\n      // this.stage.forEach((d) => {\n      //   console.log(\"d\", d);\n      // });\n      this.bgImgLayer.batchDraw();\n      // this.freeDrawLayer.batchDraw();\n      // this.freeDrawLayer.zIndex(99);\n    }\n  }\n};\nexport default {\n  methods,\n  mounted() {\n    // first we need Konva core things: stage and layer\n    let stage = new Konva.Stage({\n      container: \"image-canvas\",\n      // 确定了canvas的宽高\n      width: 800,\n      height: 600\n    });\n\n    this.stage = stage;\n\n    // 组装数据格式\n    this.imageList = this.imageList.map((d) => {\n      return {\n        isRender: false,\n        url: d\n      };\n    });\n    this.toNext();\n    // this.();\n\n    // 初始化时候需要异步\n    // setTimeout(() => {}, 100);\n  },\n  data() {\n    return {\n      stage: null,\n      imgUrl: null,\n      imageList: imageList,\n      currIndex: -1,\n      currItem: null,\n      itemList: [],\n      conWH: { width: 800, height: 600 },\n      freeDrawLayer: null,\n      bgImgLayer: null\n    };\n  },\n  components: {}\n};\n</script>\n\n<style lang=\"less\" scoped>\n#image-decorator-wrap {\n  border: 1px solid red;\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  .img {\n    margin-top: 20px;\n    border: 1px solid blue;\n  }\n}\n</style>\n"],"sourceRoot":"src/page"}]}