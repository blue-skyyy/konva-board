{"remainingRequest":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue?vue&type=style&index=0&id=36b88364&lang=less&scoped=true&","dependencies":[{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue","mtime":1600740202357},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/css-loader/dist/cjs.js","mtime":1594608463058},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1592981491866},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/postcss-loader/src/index.js","mtime":1591149286800},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/less-loader/dist/cjs.js","mtime":1597049187587},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js","mtime":1592981491866}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojaW1hZ2UtZGVjb3JhdG9yLXdyYXAgewogIGJvcmRlcjogMXB4IHNvbGlkIHJlZDsKICB3aWR0aDogODAwcHg7CiAgaGVpZ2h0OiA2MDBweDsKICBtYXJnaW46IDAgYXV0bzsKICAuaW1nIHsKICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICBib3JkZXI6IDFweCBzb2xpZCBibHVlOwogIH0KfQo="},{"version":3,"sources":["konva.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"konva.vue","sourceRoot":"src/page","sourcesContent":["<template>\n  <div id=\"image-decorator-wrap\">\n    <div id=\"image-canvas\"></div>\n\n    <select id=\"tool\">\n      <option value=\"brush\">Brush</option>\n      <option value=\"eraser\">Eraser</option>\n    </select>\n    <img :src=\"imgUrl\" class=\"img\" />\n    <button @click=\"toDataUrl\">点我下载</button>\n    <button @click=\"toNext\">下一张</button>\n    <button @click=\"toPrev\">上一张</button>\n    <!-- <button></button> -->\n  </div>\n</template>\n\n<script>\nimport Konva from \"konva\";\nimport { imageList } from \"./util.js\";\nimport Item from \"./Item.js\";\n\nconst methods = {\n  saveCurrItemState() {\n    if (!this.currItem) return;\n    let state = this.stage.toJSON();\n    console.log(\"state\", state);\n    this.currItem.save(state);\n  },\n  initFreeDrawCanvas() {\n    let layer = new Konva.Layer({});\n\n    this.freeDrawLayer = layer;\n    this.stage.add(layer);\n    layer.zIndex(99);\n    console.log(\"======\", layer.zIndex());\n    let isPaint = false;\n    let mode = \"brush\";\n    let lastLine;\n    this.stage.on(\"mousedown touchstart\", () => {\n      isPaint = true;\n      let pos = this.stage.getPointerPosition();\n      lastLine = new Konva.Line({\n        stroke: \"#df4b26\",\n        strokeWidth: 5,\n        globalCompositeOperation:\n          mode === \"brush\" ? \"source-over\" : \"destination-out\",\n        points: [pos.x, pos.y]\n      });\n      layer.add(lastLine);\n    });\n    this.stage.on(\"mouseup touchend\", () => {\n      isPaint = false;\n    });\n    this.stage.on(\"mousemove touchmove\", () => {\n      if (!isPaint) {\n        return;\n      }\n      const pos = this.stage.getPointerPosition();\n      let newPoints = lastLine.points().concat([pos.x, pos.y]);\n      lastLine.points(newPoints);\n      layer.batchDraw();\n    });\n    let select = document.getElementById(\"tool\");\n    select.addEventListener(\"change\", function() {\n      mode = select.value;\n    });\n  },\n  toNext() {\n    this.saveCurrItemState();\n\n    this.currIndex += 1;\n    this.switchImage(this.currIndex);\n  },\n  toPrev() {\n    this.currIndex -= 1;\n    this.switchImage(this.currIndex);\n  },\n  toDataUrl() {\n    this.imgUrl = this.stage.toDataURL({\n      x: 0,\n      y: 0,\n      width: 600,\n      height: 400,\n      pixelRatio: 3\n    });\n  },\n  // 加载背景\n  loadBackImage(itemObj, cb) {\n    console.log(\"itemObj\", itemObj);\n    const { imageInfo } = itemObj;\n    const { scale } = imageInfo;\n    Konva.Image.fromURL(itemObj.originUrl, (kImg) => {\n      kImg.setAttrs({\n        // 设置居中\n        x: (this.conWH.width - scale.width) / 2,\n        y: (this.conWH.height - scale.height) / 2,\n        width: scale.width,\n        height: scale.height\n      });\n      this.bgImgLayer.add(kImg);\n      this.bgImgLayer.batchDraw();\n      console.log(\"cb\", cb);\n      // cb && cb();\n    });\n  },\n  afterSwitch(index, itemObj, isFirstRender = false) {\n    if (isFirstRender) {\n      // 首次渲染;\n      if (!this.bgImgLayer) {\n        let bgImgLayer = new Konva.Layer();\n        this.bgImgLayer = bgImgLayer;\n        this.loadBackImage(itemObj, this.initFreeDrawCanvas);\n        this.stage.add(bgImgLayer);\n      } else {\n        this.bgImgLayer && this.bgImgLayer.removeChildren();\n        this.loadBackImage(itemObj);\n      }\n      this.clearFreeDrawLayer();\n    }\n  },\n  // 清除画笔层\n  clearFreeDrawLayer() {\n    if (this.freeDrawLayer) {\n      this.freeDrawLayer.removeChildren();\n      this.freeDrawLayer.draw();\n    }\n  },\n  switchImage(index) {\n    if (index < -1) return;\n    let img = this.imageList[index];\n    if (!img) return;\n    let itemObj;\n    if (img && !img.isRender) {\n      // 首次渲染\n      itemObj = new Item(\n        {\n          url: this.imageList[index].url,\n          conWH: { width: 800, height: 600 }\n        },\n        () => this.afterSwitch(index, itemObj, true)\n      );\n      this.currItem = itemObj;\n      this.itemList[this.currIndex] = itemObj;\n      this.imageList[this.currIndex].isRender = true;\n    } else {\n      // 非首次渲染\n      this.currItem = this.itemList[this.currIndex];\n      let currState = this.currItem.getCurrState();\n      console.log(\"JSON.parse(currState)\", JSON.parse(currState));\n      this.stage = Konva.Node.create(JSON.parse(currState), \"image-canvas\");\n      // this.stage.forEach((d) => {\n      //   console.log(\"d\", d);\n      // });\n      this.bgImgLayer.batchDraw();\n      // this.freeDrawLayer.batchDraw();\n      // this.freeDrawLayer.zIndex(99);\n    }\n  }\n};\nexport default {\n  methods,\n  mounted() {\n    // first we need Konva core things: stage and layer\n    let stage = new Konva.Stage({\n      container: \"image-canvas\",\n      // 确定了canvas的宽高\n      width: 800,\n      height: 600\n    });\n\n    this.stage = stage;\n\n    // 组装数据格式\n    this.imageList = this.imageList.map((d) => {\n      return {\n        isRender: false,\n        url: d\n      };\n    });\n    this.toNext();\n    // this.();\n\n    // 初始化时候需要异步\n    // setTimeout(() => {}, 100);\n  },\n  data() {\n    return {\n      stage: null,\n      imgUrl: null,\n      imageList: imageList,\n      currIndex: -1,\n      currItem: null,\n      itemList: [],\n      conWH: { width: 800, height: 600 },\n      freeDrawLayer: null,\n      bgImgLayer: null\n    };\n  },\n  components: {}\n};\n</script>\n\n<style lang=\"less\" scoped>\n#image-decorator-wrap {\n  border: 1px solid red;\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  .img {\n    margin-top: 20px;\n    border: 1px solid blue;\n  }\n}\n</style>\n"]}]}