{"remainingRequest":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue","mtime":1600740202357},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/babel-loader/lib/index.js","mtime":1591149279866},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js","mtime":1592981491866}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBLb252YSBmcm9tICJrb252YSI7CmltcG9ydCB7IGltYWdlTGlzdCB9IGZyb20gIi4vdXRpbC5qcyI7CmltcG9ydCBJdGVtIGZyb20gIi4vSXRlbS5qcyI7Cgpjb25zdCBtZXRob2RzID0gewogIHNhdmVDdXJySXRlbVN0YXRlKCkgewogICAgaWYgKCF0aGlzLmN1cnJJdGVtKSByZXR1cm47CiAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YWdlLnRvSlNPTigpOwogICAgY29uc29sZS5sb2coInN0YXRlIiwgc3RhdGUpOwogICAgdGhpcy5jdXJySXRlbS5zYXZlKHN0YXRlKTsKICB9LAogIGluaXRGcmVlRHJhd0NhbnZhcygpIHsKICAgIGxldCBsYXllciA9IG5ldyBLb252YS5MYXllcih7fSk7CgogICAgdGhpcy5mcmVlRHJhd0xheWVyID0gbGF5ZXI7CiAgICB0aGlzLnN0YWdlLmFkZChsYXllcik7CiAgICBsYXllci56SW5kZXgoOTkpOwogICAgY29uc29sZS5sb2coIj09PT09PSIsIGxheWVyLnpJbmRleCgpKTsKICAgIGxldCBpc1BhaW50ID0gZmFsc2U7CiAgICBsZXQgbW9kZSA9ICJicnVzaCI7CiAgICBsZXQgbGFzdExpbmU7CiAgICB0aGlzLnN0YWdlLm9uKCJtb3VzZWRvd24gdG91Y2hzdGFydCIsICgpID0+IHsKICAgICAgaXNQYWludCA9IHRydWU7CiAgICAgIGxldCBwb3MgPSB0aGlzLnN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpOwogICAgICBsYXN0TGluZSA9IG5ldyBLb252YS5MaW5lKHsKICAgICAgICBzdHJva2U6ICIjZGY0YjI2IiwKICAgICAgICBzdHJva2VXaWR0aDogNSwKICAgICAgICBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb246CiAgICAgICAgICBtb2RlID09PSAiYnJ1c2giID8gInNvdXJjZS1vdmVyIiA6ICJkZXN0aW5hdGlvbi1vdXQiLAogICAgICAgIHBvaW50czogW3Bvcy54LCBwb3MueV0KICAgICAgfSk7CiAgICAgIGxheWVyLmFkZChsYXN0TGluZSk7CiAgICB9KTsKICAgIHRoaXMuc3RhZ2Uub24oIm1vdXNldXAgdG91Y2hlbmQiLCAoKSA9PiB7CiAgICAgIGlzUGFpbnQgPSBmYWxzZTsKICAgIH0pOwogICAgdGhpcy5zdGFnZS5vbigibW91c2Vtb3ZlIHRvdWNobW92ZSIsICgpID0+IHsKICAgICAgaWYgKCFpc1BhaW50KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IHBvcyA9IHRoaXMuc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCk7CiAgICAgIGxldCBuZXdQb2ludHMgPSBsYXN0TGluZS5wb2ludHMoKS5jb25jYXQoW3Bvcy54LCBwb3MueV0pOwogICAgICBsYXN0TGluZS5wb2ludHMobmV3UG9pbnRzKTsKICAgICAgbGF5ZXIuYmF0Y2hEcmF3KCk7CiAgICB9KTsKICAgIGxldCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidG9vbCIpOwogICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGZ1bmN0aW9uKCkgewogICAgICBtb2RlID0gc2VsZWN0LnZhbHVlOwogICAgfSk7CiAgfSwKICB0b05leHQoKSB7CiAgICB0aGlzLnNhdmVDdXJySXRlbVN0YXRlKCk7CgogICAgdGhpcy5jdXJySW5kZXggKz0gMTsKICAgIHRoaXMuc3dpdGNoSW1hZ2UodGhpcy5jdXJySW5kZXgpOwogIH0sCiAgdG9QcmV2KCkgewogICAgdGhpcy5jdXJySW5kZXggLT0gMTsKICAgIHRoaXMuc3dpdGNoSW1hZ2UodGhpcy5jdXJySW5kZXgpOwogIH0sCiAgdG9EYXRhVXJsKCkgewogICAgdGhpcy5pbWdVcmwgPSB0aGlzLnN0YWdlLnRvRGF0YVVSTCh7CiAgICAgIHg6IDAsCiAgICAgIHk6IDAsCiAgICAgIHdpZHRoOiA2MDAsCiAgICAgIGhlaWdodDogNDAwLAogICAgICBwaXhlbFJhdGlvOiAzCiAgICB9KTsKICB9LAogIC8vIOWKoOi9veiDjOaZrwogIGxvYWRCYWNrSW1hZ2UoaXRlbU9iaiwgY2IpIHsKICAgIGNvbnNvbGUubG9nKCJpdGVtT2JqIiwgaXRlbU9iaik7CiAgICBjb25zdCB7IGltYWdlSW5mbyB9ID0gaXRlbU9iajsKICAgIGNvbnN0IHsgc2NhbGUgfSA9IGltYWdlSW5mbzsKICAgIEtvbnZhLkltYWdlLmZyb21VUkwoaXRlbU9iai5vcmlnaW5VcmwsIChrSW1nKSA9PiB7CiAgICAgIGtJbWcuc2V0QXR0cnMoewogICAgICAgIC8vIOiuvue9ruWxheS4rQogICAgICAgIHg6ICh0aGlzLmNvbldILndpZHRoIC0gc2NhbGUud2lkdGgpIC8gMiwKICAgICAgICB5OiAodGhpcy5jb25XSC5oZWlnaHQgLSBzY2FsZS5oZWlnaHQpIC8gMiwKICAgICAgICB3aWR0aDogc2NhbGUud2lkdGgsCiAgICAgICAgaGVpZ2h0OiBzY2FsZS5oZWlnaHQKICAgICAgfSk7CiAgICAgIHRoaXMuYmdJbWdMYXllci5hZGQoa0ltZyk7CiAgICAgIHRoaXMuYmdJbWdMYXllci5iYXRjaERyYXcoKTsKICAgICAgY29uc29sZS5sb2coImNiIiwgY2IpOwogICAgICAvLyBjYiAmJiBjYigpOwogICAgfSk7CiAgfSwKICBhZnRlclN3aXRjaChpbmRleCwgaXRlbU9iaiwgaXNGaXJzdFJlbmRlciA9IGZhbHNlKSB7CiAgICBpZiAoaXNGaXJzdFJlbmRlcikgewogICAgICAvLyDpppbmrKHmuLLmn5M7CiAgICAgIGlmICghdGhpcy5iZ0ltZ0xheWVyKSB7CiAgICAgICAgbGV0IGJnSW1nTGF5ZXIgPSBuZXcgS29udmEuTGF5ZXIoKTsKICAgICAgICB0aGlzLmJnSW1nTGF5ZXIgPSBiZ0ltZ0xheWVyOwogICAgICAgIHRoaXMubG9hZEJhY2tJbWFnZShpdGVtT2JqLCB0aGlzLmluaXRGcmVlRHJhd0NhbnZhcyk7CiAgICAgICAgdGhpcy5zdGFnZS5hZGQoYmdJbWdMYXllcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5iZ0ltZ0xheWVyICYmIHRoaXMuYmdJbWdMYXllci5yZW1vdmVDaGlsZHJlbigpOwogICAgICAgIHRoaXMubG9hZEJhY2tJbWFnZShpdGVtT2JqKTsKICAgICAgfQogICAgICB0aGlzLmNsZWFyRnJlZURyYXdMYXllcigpOwogICAgfQogIH0sCiAgLy8g5riF6Zmk55S756yU5bGCCiAgY2xlYXJGcmVlRHJhd0xheWVyKCkgewogICAgaWYgKHRoaXMuZnJlZURyYXdMYXllcikgewogICAgICB0aGlzLmZyZWVEcmF3TGF5ZXIucmVtb3ZlQ2hpbGRyZW4oKTsKICAgICAgdGhpcy5mcmVlRHJhd0xheWVyLmRyYXcoKTsKICAgIH0KICB9LAogIHN3aXRjaEltYWdlKGluZGV4KSB7CiAgICBpZiAoaW5kZXggPCAtMSkgcmV0dXJuOwogICAgbGV0IGltZyA9IHRoaXMuaW1hZ2VMaXN0W2luZGV4XTsKICAgIGlmICghaW1nKSByZXR1cm47CiAgICBsZXQgaXRlbU9iajsKICAgIGlmIChpbWcgJiYgIWltZy5pc1JlbmRlcikgewogICAgICAvLyDpppbmrKHmuLLmn5MKICAgICAgaXRlbU9iaiA9IG5ldyBJdGVtKAogICAgICAgIHsKICAgICAgICAgIHVybDogdGhpcy5pbWFnZUxpc3RbaW5kZXhdLnVybCwKICAgICAgICAgIGNvbldIOiB7IHdpZHRoOiA4MDAsIGhlaWdodDogNjAwIH0KICAgICAgICB9LAogICAgICAgICgpID0+IHRoaXMuYWZ0ZXJTd2l0Y2goaW5kZXgsIGl0ZW1PYmosIHRydWUpCiAgICAgICk7CiAgICAgIHRoaXMuY3Vyckl0ZW0gPSBpdGVtT2JqOwogICAgICB0aGlzLml0ZW1MaXN0W3RoaXMuY3VyckluZGV4XSA9IGl0ZW1PYmo7CiAgICAgIHRoaXMuaW1hZ2VMaXN0W3RoaXMuY3VyckluZGV4XS5pc1JlbmRlciA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICAvLyDpnZ7pppbmrKHmuLLmn5MKICAgICAgdGhpcy5jdXJySXRlbSA9IHRoaXMuaXRlbUxpc3RbdGhpcy5jdXJySW5kZXhdOwogICAgICBsZXQgY3VyclN0YXRlID0gdGhpcy5jdXJySXRlbS5nZXRDdXJyU3RhdGUoKTsKICAgICAgY29uc29sZS5sb2coIkpTT04ucGFyc2UoY3VyclN0YXRlKSIsIEpTT04ucGFyc2UoY3VyclN0YXRlKSk7CiAgICAgIHRoaXMuc3RhZ2UgPSBLb252YS5Ob2RlLmNyZWF0ZShKU09OLnBhcnNlKGN1cnJTdGF0ZSksICJpbWFnZS1jYW52YXMiKTsKICAgICAgLy8gdGhpcy5zdGFnZS5mb3JFYWNoKChkKSA9PiB7CiAgICAgIC8vICAgY29uc29sZS5sb2coImQiLCBkKTsKICAgICAgLy8gfSk7CiAgICAgIHRoaXMuYmdJbWdMYXllci5iYXRjaERyYXcoKTsKICAgICAgLy8gdGhpcy5mcmVlRHJhd0xheWVyLmJhdGNoRHJhdygpOwogICAgICAvLyB0aGlzLmZyZWVEcmF3TGF5ZXIuekluZGV4KDk5KTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBtZXRob2RzLAogIG1vdW50ZWQoKSB7CiAgICAvLyBmaXJzdCB3ZSBuZWVkIEtvbnZhIGNvcmUgdGhpbmdzOiBzdGFnZSBhbmQgbGF5ZXIKICAgIGxldCBzdGFnZSA9IG5ldyBLb252YS5TdGFnZSh7CiAgICAgIGNvbnRhaW5lcjogImltYWdlLWNhbnZhcyIsCiAgICAgIC8vIOehruWumuS6hmNhbnZhc+eahOWuvemrmAogICAgICB3aWR0aDogODAwLAogICAgICBoZWlnaHQ6IDYwMAogICAgfSk7CgogICAgdGhpcy5zdGFnZSA9IHN0YWdlOwoKICAgIC8vIOe7hOijheaVsOaNruagvOW8jwogICAgdGhpcy5pbWFnZUxpc3QgPSB0aGlzLmltYWdlTGlzdC5tYXAoKGQpID0+IHsKICAgICAgcmV0dXJuIHsKICAgICAgICBpc1JlbmRlcjogZmFsc2UsCiAgICAgICAgdXJsOiBkCiAgICAgIH07CiAgICB9KTsKICAgIHRoaXMudG9OZXh0KCk7CiAgICAvLyB0aGlzLigpOwoKICAgIC8vIOWIneWni+WMluaXtuWAmemcgOimgeW8guatpQogICAgLy8gc2V0VGltZW91dCgoKSA9PiB7fSwgMTAwKTsKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzdGFnZTogbnVsbCwKICAgICAgaW1nVXJsOiBudWxsLAogICAgICBpbWFnZUxpc3Q6IGltYWdlTGlzdCwKICAgICAgY3VyckluZGV4OiAtMSwKICAgICAgY3Vyckl0ZW06IG51bGwsCiAgICAgIGl0ZW1MaXN0OiBbXSwKICAgICAgY29uV0g6IHsgd2lkdGg6IDgwMCwgaGVpZ2h0OiA2MDAgfSwKICAgICAgZnJlZURyYXdMYXllcjogbnVsbCwKICAgICAgYmdJbWdMYXllcjogbnVsbAogICAgfTsKICB9LAogIGNvbXBvbmVudHM6IHt9Cn07Cg=="},{"version":3,"sources":["konva.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"konva.vue","sourceRoot":"src/page","sourcesContent":["<template>\n  <div id=\"image-decorator-wrap\">\n    <div id=\"image-canvas\"></div>\n\n    <select id=\"tool\">\n      <option value=\"brush\">Brush</option>\n      <option value=\"eraser\">Eraser</option>\n    </select>\n    <img :src=\"imgUrl\" class=\"img\" />\n    <button @click=\"toDataUrl\">点我下载</button>\n    <button @click=\"toNext\">下一张</button>\n    <button @click=\"toPrev\">上一张</button>\n    <!-- <button></button> -->\n  </div>\n</template>\n\n<script>\nimport Konva from \"konva\";\nimport { imageList } from \"./util.js\";\nimport Item from \"./Item.js\";\n\nconst methods = {\n  saveCurrItemState() {\n    if (!this.currItem) return;\n    let state = this.stage.toJSON();\n    console.log(\"state\", state);\n    this.currItem.save(state);\n  },\n  initFreeDrawCanvas() {\n    let layer = new Konva.Layer({});\n\n    this.freeDrawLayer = layer;\n    this.stage.add(layer);\n    layer.zIndex(99);\n    console.log(\"======\", layer.zIndex());\n    let isPaint = false;\n    let mode = \"brush\";\n    let lastLine;\n    this.stage.on(\"mousedown touchstart\", () => {\n      isPaint = true;\n      let pos = this.stage.getPointerPosition();\n      lastLine = new Konva.Line({\n        stroke: \"#df4b26\",\n        strokeWidth: 5,\n        globalCompositeOperation:\n          mode === \"brush\" ? \"source-over\" : \"destination-out\",\n        points: [pos.x, pos.y]\n      });\n      layer.add(lastLine);\n    });\n    this.stage.on(\"mouseup touchend\", () => {\n      isPaint = false;\n    });\n    this.stage.on(\"mousemove touchmove\", () => {\n      if (!isPaint) {\n        return;\n      }\n      const pos = this.stage.getPointerPosition();\n      let newPoints = lastLine.points().concat([pos.x, pos.y]);\n      lastLine.points(newPoints);\n      layer.batchDraw();\n    });\n    let select = document.getElementById(\"tool\");\n    select.addEventListener(\"change\", function() {\n      mode = select.value;\n    });\n  },\n  toNext() {\n    this.saveCurrItemState();\n\n    this.currIndex += 1;\n    this.switchImage(this.currIndex);\n  },\n  toPrev() {\n    this.currIndex -= 1;\n    this.switchImage(this.currIndex);\n  },\n  toDataUrl() {\n    this.imgUrl = this.stage.toDataURL({\n      x: 0,\n      y: 0,\n      width: 600,\n      height: 400,\n      pixelRatio: 3\n    });\n  },\n  // 加载背景\n  loadBackImage(itemObj, cb) {\n    console.log(\"itemObj\", itemObj);\n    const { imageInfo } = itemObj;\n    const { scale } = imageInfo;\n    Konva.Image.fromURL(itemObj.originUrl, (kImg) => {\n      kImg.setAttrs({\n        // 设置居中\n        x: (this.conWH.width - scale.width) / 2,\n        y: (this.conWH.height - scale.height) / 2,\n        width: scale.width,\n        height: scale.height\n      });\n      this.bgImgLayer.add(kImg);\n      this.bgImgLayer.batchDraw();\n      console.log(\"cb\", cb);\n      // cb && cb();\n    });\n  },\n  afterSwitch(index, itemObj, isFirstRender = false) {\n    if (isFirstRender) {\n      // 首次渲染;\n      if (!this.bgImgLayer) {\n        let bgImgLayer = new Konva.Layer();\n        this.bgImgLayer = bgImgLayer;\n        this.loadBackImage(itemObj, this.initFreeDrawCanvas);\n        this.stage.add(bgImgLayer);\n      } else {\n        this.bgImgLayer && this.bgImgLayer.removeChildren();\n        this.loadBackImage(itemObj);\n      }\n      this.clearFreeDrawLayer();\n    }\n  },\n  // 清除画笔层\n  clearFreeDrawLayer() {\n    if (this.freeDrawLayer) {\n      this.freeDrawLayer.removeChildren();\n      this.freeDrawLayer.draw();\n    }\n  },\n  switchImage(index) {\n    if (index < -1) return;\n    let img = this.imageList[index];\n    if (!img) return;\n    let itemObj;\n    if (img && !img.isRender) {\n      // 首次渲染\n      itemObj = new Item(\n        {\n          url: this.imageList[index].url,\n          conWH: { width: 800, height: 600 }\n        },\n        () => this.afterSwitch(index, itemObj, true)\n      );\n      this.currItem = itemObj;\n      this.itemList[this.currIndex] = itemObj;\n      this.imageList[this.currIndex].isRender = true;\n    } else {\n      // 非首次渲染\n      this.currItem = this.itemList[this.currIndex];\n      let currState = this.currItem.getCurrState();\n      console.log(\"JSON.parse(currState)\", JSON.parse(currState));\n      this.stage = Konva.Node.create(JSON.parse(currState), \"image-canvas\");\n      // this.stage.forEach((d) => {\n      //   console.log(\"d\", d);\n      // });\n      this.bgImgLayer.batchDraw();\n      // this.freeDrawLayer.batchDraw();\n      // this.freeDrawLayer.zIndex(99);\n    }\n  }\n};\nexport default {\n  methods,\n  mounted() {\n    // first we need Konva core things: stage and layer\n    let stage = new Konva.Stage({\n      container: \"image-canvas\",\n      // 确定了canvas的宽高\n      width: 800,\n      height: 600\n    });\n\n    this.stage = stage;\n\n    // 组装数据格式\n    this.imageList = this.imageList.map((d) => {\n      return {\n        isRender: false,\n        url: d\n      };\n    });\n    this.toNext();\n    // this.();\n\n    // 初始化时候需要异步\n    // setTimeout(() => {}, 100);\n  },\n  data() {\n    return {\n      stage: null,\n      imgUrl: null,\n      imageList: imageList,\n      currIndex: -1,\n      currItem: null,\n      itemList: [],\n      conWH: { width: 800, height: 600 },\n      freeDrawLayer: null,\n      bgImgLayer: null\n    };\n  },\n  components: {}\n};\n</script>\n\n<style lang=\"less\" scoped>\n#image-decorator-wrap {\n  border: 1px solid red;\n  width: 800px;\n  height: 600px;\n  margin: 0 auto;\n  .img {\n    margin-top: 20px;\n    border: 1px solid blue;\n  }\n}\n</style>\n"]}]}