{"remainingRequest":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/konva.vue","mtime":1612250465918},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/babel-loader/lib/index.js","mtime":1591149279866},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js","mtime":1592981491866}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBLb252YSBmcm9tICJrb252YSI7CmltcG9ydCB7IGltYWdlTGlzdCB9IGZyb20gIi4vdXRpbC5qcyI7CmltcG9ydCBJdGVtIGZyb20gIi4vSXRlbS5qcyI7Cgpjb25zdCBDX1dJRFRIID0gODAwOwpjb25zdCBDX0hFSUdIVCA9IDYwMDsKY29uc3QgbWV0aG9kcyA9IHsKICAvLyDliIfmjaLlm77niYflpI3ljp/mk43kvZwKCiAgLy8g5YiH5o2i5bel5YW35qCP5qih5byPCiAgc3dpdGNoTW9kZShtb2RlKSB7CiAgICB0aGlzLm1vZGUgPSBtb2RlOwogICAgaWYgKG1vZGUgPT09ICJicnVzaCIgfHwgbW9kZSA9PT0gImVyYXNlciIpIHsKICAgICAgdGhpcy5hZGRFdmVudCgpOwogICAgICB0aGlzLmN1cnJJdGVtLmJnSW1nLmRyYWdnYWJsZShmYWxzZSk7CiAgICB9CiAgICBpZiAobW9kZSA9PT0gIm1vdmVvYmplY3QiKSB7CiAgICAgIHRoaXMucmVtb3ZlU3RhZ2VFdmVudHMoKTsKICAgICAgdGhpcy5zZXRDdXJzb3JTdHlsZSgicG9pbnRlciIpOwogICAgICB0aGlzLmN1cnJJdGVtLmJnSW1nLmRyYWdnYWJsZSh0cnVlKTsKICAgIH0KCiAgICBpZiAobW9kZSA9PT0gInJlc2V0IikgewogICAgICBsZXQgc3RhdGUgPSB0aGlzLmN1cnJJdGVtLmdldE9yaWdpblN0YXRlKCk7CiAgICAgIHRoaXMubG9hZENhbnZhc0Zyb21KU09OKEpTT04ucGFyc2Uoc3RhdGUpKTsKICAgICAgdGhpcy5jdXJySXRlbS5jbGVhckhpc3RvcnlsaXN0KCk7CiAgICAgIHRoaXMuY3Vyckl0ZW0uc2F2ZShKU09OLnBhcnNlKHN0YXRlKSk7CiAgICAgIHRoaXMuc3dpdGNoTW9kZSgiYnJ1c2giKQogICAgfQogIH0sCiAgLy8g6K6+572u6byg5qCH5qC35byPCiAgc2V0Q3Vyc29yU3R5bGUodHlwZSkgewogICAgc3dpdGNoICh0eXBlKSB7CiAgICAgIGNhc2UgInBvaW50ZXIiOgogICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gInBvaW50ZXIiOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJkZWZhdWx0IjoKICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICJwb2ludGVyIjsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICJwb2ludGVyIjsKICAgICAgICBicmVhazsKICAgIH0KICB9LAogIC8vIOiuvue9ruiDjOaZr+WbvueJh+enu+WKqAogIG1vdmVCZ0ltZygpIHsKICAgIC8vIGNvbnNvbGUubG9nKCJ0aGlzLnN0YWdlIiwgdGhpcy5zdGFnZSwgdGhpcy5zdGFnZS5saXN0ZW5pbmcpOwogICAgLy8gdGhpcy5zdGFnZS5saXN0ZW5pbmcoZmFsc2UpOwogICAgLy8gdGhpcy5pc01vdmluZ0JnSW1nID0gdHJ1ZTsKICAgIHRoaXMucmVtb3ZlU3RhZ2VFdmVudHMoKTsKICAgIHRoaXMuY3Vyckl0ZW0uYmdJbWcuZHJhZ2dhYmxlKHRydWUpOwogICAgdGhpcy5zZXRDdXJzb3JTdHlsZSgicG9pbnRlciIpOwogIH0sCiAgLy8g5peL6L2sCiAgcm90YXRlVG8odHlwZSkgewogICAgaWYgKHR5cGUgPT09ICJsZWZ0IikgewogICAgICB0aGlzLnN0YWdlLnJvdGF0aW9uKC05MCk7CiAgICB9CiAgICBpZiAodHlwZSA9PT0gInJpZ2h0IikgewogICAgICB0aGlzLnN0YWdlLnJvdGF0aW9uKDkwKTsKICAgIH0KICAgIHRoaXMuc3RhZ2UuYmF0Y2hEcmF3KCk7CiAgfSwKICAvLyAKICBzZXRab29tKHR5cGUpIHsKICAgIGxldCB6b29tID0gdGhpcy5zdGFnZS5nZXRBdHRyKCJzY2FsZVgiKSB8fCAxOwogICAgaWYgKHR5cGUgPT0gIm91dCIpIHsKICAgICAgLy8g5pS+5aSnCiAgICAgIHpvb20gPSB6b29tICsgdGhpcy56b29tU3RlcDsKICAgICAgem9vbSA9IE1hdGgubWluKDMsIHpvb20pOyAvL+acgOWkp+aYr+WOn+adpeeahDPlgI0KICAgIH0KICAgIGlmICh0eXBlID09PSAiaW4iKSB7CiAgICAgIHpvb20gPSB6b29tIC0gdGhpcy56b29tU3RlcDsKICAgICAgem9vbSA9IE1hdGgubWF4KDAuMSwgem9vbSk7IC8v5pyA5bCP5Li65Y6f5p2l55qEMS8xMAogICAgfQogICAgdGhpcy5zdGFnZS5zY2FsZSh7CiAgICAgIHg6IHpvb20sCiAgICAgIHk6IHpvb20KICAgIH0pOwogICAgdGhpcy5zdGFnZS5iYXRjaERyYXcoKTsKICB9LAogIC8vIOenu+mZpHN0YWdl5LqL5Lu255uR5ZCsCiAgcmVtb3ZlU3RhZ2VFdmVudHMoKSB7CiAgICB0aGlzLnN0YWdlLm9mZigibW91c2Vkb3duIik7CiAgICB0aGlzLnN0YWdlLm9mZigibW91c2Vtb3ZlIik7CiAgICB0aGlzLnN0YWdlLm9mZigibW91c2V1cCIpOwogIH0sCiAgLy8g5LqL5Lu255uR5ZCsCiAgYWRkRXZlbnQoKSB7CiAgICBsZXQgaXNQYWludCA9IGZhbHNlOwogICAgbGV0IGxhc3RMaW5lOwogICAgdGhpcy5zdGFnZS5vbigibW91c2Vkb3duIiwgKCkgPT4gewogICAgICBpc1BhaW50ID0gdHJ1ZTsKICAgICAgbGV0IHBvcyA9IHRoaXMuc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCk7CiAgICAgIGxldCBvbGRTY2FsZSA9IHRoaXMuc3RhZ2Uuc2NhbGVYKCk7CiAgICAgIGxhc3RMaW5lID0gbmV3IEtvbnZhLkxpbmUoewogICAgICAgIHN0cm9rZTogIiNkZjRiMjYiLAogICAgICAgIHN0cm9rZVdpZHRoOiA1LAogICAgICAgIGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjoKICAgICAgICAgIHRoaXMubW9kZSA9PT0gImJydXNoIiA/ICJzb3VyY2Utb3ZlciIgOiAiZGVzdGluYXRpb24tb3V0IiwKICAgICAgICBwb2ludHM6IFsKICAgICAgICAgIHBvcy54IC8gb2xkU2NhbGUgLSB0aGlzLnN0YWdlLngoKSAvIG9sZFNjYWxlLAogICAgICAgICAgcG9zLnkgLyBvbGRTY2FsZSAtIHRoaXMuc3RhZ2UueSgpIC8gb2xkU2NhbGUKICAgICAgICBdCiAgICAgIH0pOwogICAgICB0aGlzLmZyZWVEcmF3TGF5ZXIuYWRkKGxhc3RMaW5lKTsKICAgIH0pOwogICAgdGhpcy5zdGFnZS5vbigibW91c2V1cCIsICgpID0+IHsKICAgICAgaXNQYWludCA9IGZhbHNlOwogICAgICB0aGlzLnNhdmVDdXJySXRlbVN0YXRlKCk7CiAgICB9KTsKICAgIHRoaXMuc3RhZ2Uub24oIm1vdXNlbW92ZSIsICgpID0+IHsKICAgICAgbGV0IG9sZFNjYWxlID0gdGhpcy5zdGFnZS5zY2FsZVgoKTsKICAgICAgaWYgKCFpc1BhaW50KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIC8vIOehruS/nee8qeaUvuWKn+iDveiDveato+W4uOS9v+eUqAogICAgICBjb25zdCBwb3MgPSB0aGlzLnN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpOwogICAgICBsZXQgbmV3UG9pbnRzID0gbGFzdExpbmUKICAgICAgICAucG9pbnRzKCkKICAgICAgICAuY29uY2F0KFsKICAgICAgICAgIHBvcy54IC8gb2xkU2NhbGUgLSB0aGlzLnN0YWdlLngoKSAvIG9sZFNjYWxlLAogICAgICAgICAgcG9zLnkgLyBvbGRTY2FsZSAtIHRoaXMuc3RhZ2UueSgpIC8gb2xkU2NhbGUKICAgICAgICBdKTsKICAgICAgbGFzdExpbmUucG9pbnRzKG5ld1BvaW50cyk7CiAgICAgIHRoaXMuZnJlZURyYXdMYXllci5iYXRjaERyYXcoKTsKICAgIH0pOwogIH0sCiAgLy8g5Y+N5bqP5YiX5YyWCiAgbG9hZENhbnZhc0Zyb21KU09OKHN0YXRlKSB7CiAgICBpZiAoIXN0YXRlKSByZXR1cm47CiAgICB0aGlzLnN0YWdlID0gS29udmEuTm9kZS5jcmVhdGUoc3RhdGUsICJpbWFnZS1jYW52YXMiKTsKICAgIC8vIOa3u+WKoOiDjOaZr+WbvgogICAgLy8g6IOM5pmv5Zu+54mH5LiN5Lya5L+d5a2Y5ZyoSlNPTuWvueixoemHjAogICAgdGhpcy5iZ0ltZ0xheWVyID0gdGhpcy5zdGFnZS5nZXRMYXllcnMoKVswXTsKICAgIHRoaXMuYmdJbWdMYXllci5hZGQodGhpcy5jdXJySXRlbS5iZ0ltZykKICAgIHRoaXMuYmdJbWdMYXllci5iYXRjaERyYXcoKTsKICAgIC8vIHRoaXMuYmdJbWdMYXllci5iYXRjaERyYXcoKTsKICAgIHRoaXMuZnJlZURyYXdMYXllciA9IHRoaXMuc3RhZ2UuZ2V0TGF5ZXJzKClbMV07CiAgICB0aGlzLmZyZWVEcmF3TGF5ZXIuYmF0Y2hEcmF3KCk7CiAgICB0aGlzLmlzU3dpdGNoaW5nID0gZmFsc2U7CgogIH0sCiAgc2F2ZUN1cnJJdGVtU3RhdGUoKSB7CiAgICBpZiAoIXRoaXMuY3Vyckl0ZW0pIHJldHVybjsKICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhZ2UudG9KU09OKCk7CiAgICB0aGlzLmN1cnJJdGVtLnNhdmUoc3RhdGUpOwogIH0sCiAgdG9OZXh0KCkgewogICAgLy8gdGhpcy5zYXZlQ3Vyckl0ZW1TdGF0ZSgpOwogICAgdGhpcy5zd2l0Y2hJbWFnZSh0aGlzLmN1cnJJbmRleCArIDEpOwogIH0sCiAgdG9QcmV2KCkgewogICAgLy8gdGhpcy5zYXZlQ3Vyckl0ZW1TdGF0ZSgpOwogICAgdGhpcy5zd2l0Y2hJbWFnZSh0aGlzLmN1cnJJbmRleCAtIDEpOwogIH0sCiAgdG9EYXRhVXJsKCkgewogICAgdGhpcy5pbWdVcmwgPSB0aGlzLnN0YWdlLnRvRGF0YVVSTCh7CiAgICAgIHg6IDAsCiAgICAgIHk6IDAsCiAgICAgIHdpZHRoOiBDX1dJRFRILAogICAgICBoZWlnaHQ6IENfSEVJR0hULAogICAgICBwaXhlbFJhdGlvOiAxLCAvLyDlm77niYfotKjph48KICAgIH0pOwogIH0sCiAgLy8g5Yqg6L296IOM5pmv5Zu+54mHCiAgbG9hZEJhY2tJbWFnZShpdGVtT2JqKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc2xvdmUpID0+IHsKICAgICAgY29uc3QgeyBpbWFnZUluZm8gfSA9IGl0ZW1PYmo7CiAgICAgIGNvbnN0IHsgc2NhbGUgfSA9IGltYWdlSW5mbzsKICAgICAgS29udmEuSW1hZ2UuZnJvbVVSTChpdGVtT2JqLm9yaWdpblVybCwgKGtJbWcpID0+IHsKICAgICAgICBrSW1nLnNldEF0dHJzKHsKICAgICAgICAgIC8vIOiuvue9ruWxheS4rQogICAgICAgICAgeDogdGhpcy5nZXRCZ0ltZ1hZT2Zmc2V0KHNjYWxlLndpZHRoLCBudWxsKSwKICAgICAgICAgIHk6IHRoaXMuZ2V0QmdJbWdYWU9mZnNldChudWxsLCBzY2FsZS5oZWlnaHQpLAogICAgICAgICAgaWQ6ICJiZ0ltZyIsCiAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLAogICAgICAgICAgc291cmNlOiBpdGVtT2JqLm9yaWdpblVybCwKICAgICAgICAgIHdpZHRoOiBzY2FsZS53aWR0aCwKICAgICAgICAgIGhlaWdodDogc2NhbGUuaGVpZ2h0CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5iZ0ltZ0xheWVyLmFkZChrSW1nKTsKICAgICAgICB0aGlzLmJnSW1nTGF5ZXIuYmF0Y2hEcmF3KCk7CiAgICAgICAgdGhpcy5jdXJySXRlbS5iZ0ltZyA9IGtJbWc7CiAgICAgICAgcmVzbG92ZSgpOwogICAgICAgIC8vIGNiICYmIGNiKCk7CiAgICAgIH0pOwogICAgfSkKICB9LAogIC8vIOiOt+WPluiDjOaZr+WbvueJh3h55YGP56e76YePCiAgZ2V0QmdJbWdYWU9mZnNldCh3aWR0aCwgaGVpZ2h0KSB7CiAgICBpZiAod2lkdGgpIHsKICAgICAgcmV0dXJuIENfV0lEVEggPiB3aWR0aCA/IChDX1dJRFRIIC0gd2lkdGgpIC8gMiA6IDA7CiAgICB9CiAgICBpZiAoaGVpZ2h0KSB7CiAgICAgIHJldHVybiBDX0hFSUdIVCA+IGhlaWdodCA/IChDX0hFSUdIVCAtIGhlaWdodCkgLyAyIDogMDsKICAgIH0KICB9LAoKICBhZnRlclN3aXRjaChpbmRleCwgaXRlbU9iaiwgaXNGaXJzdFJlbmRlciA9IGZhbHNlKSB7CiAgICBpZiAoaXNGaXJzdFJlbmRlcikgewogICAgICAvLyDpppbmrKHmuLLmn5M7CiAgICAgIGlmICghdGhpcy5iZ0ltZ0xheWVyKSB7CiAgICAgICAgbGV0IGJnSW1nTGF5ZXIgPSBuZXcgS29udmEuTGF5ZXIoKTsKICAgICAgICB0aGlzLmJnSW1nTGF5ZXIgPSBiZ0ltZ0xheWVyOwogICAgICAgIHRoaXMubG9hZEJhY2tJbWFnZShpdGVtT2JqLCB0aGlzLmluaXRGcmVlRHJhd0NhbnZhcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5iZ0ltZ0xheWVyICYmIHRoaXMuYmdJbWdMYXllci5yZW1vdmVDaGlsZHJlbigpOwogICAgICAgIHRoaXMubG9hZEJhY2tJbWFnZShpdGVtT2JqKS50aGVuKCgpID0+IHsKICAgICAgICAgIHRoaXMuc2F2ZUN1cnJJdGVtU3RhdGUoKTsKICAgICAgICB9KTsKICAgICAgCiAgICAgIH0KICAgICAgdGhpcy5jbGVhckZyZWVEcmF3TGF5ZXIoKTsKICAgICAgdGhpcy5pc1N3aXRjaGluZyA9IGZhbHNlOwogICAgfQogIH0sCiAgLy8g6K6+572uc3RhZ2Xlrr3pq5gKICBzZXRTdGFnZVdIKHcsIGgpIHsKICAgIHRoaXMuc3RhZ2Uud2lkdGgodyk7CiAgICB0aGlzLnN0YWdlLmhlaWdodChoKTsKICB9LAogIC8vIOa4hemZpOeUu+eslOWxggogIGNsZWFyRnJlZURyYXdMYXllcigpIHsKICAgIGlmICh0aGlzLmZyZWVEcmF3TGF5ZXIpIHsKICAgICAgdGhpcy5mcmVlRHJhd0xheWVyLnJlbW92ZUNoaWxkcmVuKCk7CiAgICAgIHRoaXMuZnJlZURyYXdMYXllci5kcmF3KCk7CiAgICB9CiAgfSwKICAvLyDliIfmjaLlm77lsYIKICBzd2l0Y2hJbWFnZShpbmRleCkgewogICAgY29uc29sZS5sb2coIj09PT09c3dpdGNoSW1hZ2U9PT09PSIsIGluZGV4KTsKICAgIGlmIChpbmRleCA8IC0xKSByZXR1cm47CiAgICBpZiAodGhpcy5pc1N3aXRjaGluZykgcmV0dXJuOwogICAgbGV0IGltZyA9IHRoaXMuaW1hZ2VMaXN0W2luZGV4XTsKICAgIGlmICghaW1nKSB7CiAgICAgIGNvbnNvbGUud2Fybigi5Zu+54mH5LiN5a2Y5ZyoIik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGxldCBpdGVtT2JqOwogICAgaWYgKGltZyAmJiAhaW1nLmlzUmVuZGVyKSB7CiAgICAgIHRoaXMuaXNTd2l0Y2hpbmcgPSB0cnVlOwogICAgICAvLyDpppbmrKHmuLLmn5MKICAgICAgaXRlbU9iaiA9IG5ldyBJdGVtKAogICAgICAgIHsKICAgICAgICAgIHVybDogdGhpcy5pbWFnZUxpc3RbaW5kZXhdLnVybCwKICAgICAgICAgIGNvbldIOiB7IHdpZHRoOiA4MDAsIGhlaWdodDogNjAwIH0KICAgICAgICB9LAogICAgICAgICgpID0+IHRoaXMuYWZ0ZXJTd2l0Y2goaW5kZXgsIGl0ZW1PYmosIHRydWUpCiAgICAgICk7CiAgICAgIGNvbnNvbGUubG9nKCI9PT096aaW5qyh5riy5p+TPT09PT0iKQogICAgICB0aGlzLmN1cnJJbmRleCA9IGluZGV4OwogICAgICB0aGlzLmN1cnJJdGVtID0gaXRlbU9iajsKICAgICAgdGhpcy5pdGVtTGlzdFt0aGlzLmN1cnJJbmRleF0gPSBpdGVtT2JqOwogICAgICB0aGlzLiRzZXQodGhpcy5pbWFnZUxpc3QsIGluZGV4LCBPYmplY3QuYXNzaWduKHt9LCB7Li4udGhpcy5pbWFnZUxpc3RbaW5kZXhdfSwge2lzUmVuZGVyOiB0cnVlfSkpCiAgICB9IGVsc2UgewogICAgICB0aGlzLmlzU3dpdGNoaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5jdXJySW5kZXggPSBpbmRleDsKICAgICAgLy8g6Z2e6aaW5qyh5riy5p+TCiAgICAgIGNvbnNvbGUubG9nKCI9PT09PT3pnZ7pppbmrKHmuLLmn5M9PT09PSIpOwogICAgICB0aGlzLmN1cnJJdGVtID0gdGhpcy5pdGVtTGlzdFt0aGlzLmN1cnJJbmRleF07CiAgICAgIGxldCBsYXN0U3RhdGUgPSB0aGlzLmN1cnJJdGVtLmdldExhc3RTdGF0ZSgpOwogICAgICB0aGlzLmxvYWRDYW52YXNGcm9tSlNPTihKU09OLnBhcnNlKGxhc3RTdGF0ZSkpOwogICAgfQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIG1ldGhvZHMsCiAgbW91bnRlZCgpIHsKICAgIC8vIGZpcnN0IHdlIG5lZWQgS29udmEgY29yZSB0aGluZ3M6IHN0YWdlIGFuZCBsYXllcgogICAgbGV0IHN0YWdlID0gbmV3IEtvbnZhLlN0YWdlKHsKICAgICAgY29udGFpbmVyOiAiaW1hZ2UtY2FudmFzIiwKICAgICAgc2NhbGVZOiAxLAogICAgICBzY2FsZVg6IDEsCiAgICAgIGNlbnRlcmVkU2NhbGluZzogdHJ1ZSwKICAgICAgLy8g56Gu5a6a5LqGY2FudmFz55qE5a696auYCiAgICAgIHdpZHRoOiA4MDAsCiAgICAgIGhlaWdodDogNjAwCiAgICB9KTsKCiAgICB0aGlzLnN0YWdlID0gc3RhZ2U7CgogICAgLy8g6IOM5pmv5bGCCiAgICB0aGlzLmJnSW1nTGF5ZXIgPSBuZXcgS29udmEuTGF5ZXIoewogICAgICBpZDogImJnX2ltYWdlX2xheWVyIgogICAgfSk7CgogICAgLy8g57uY55S75bGCCiAgICB0aGlzLmZyZWVEcmF3TGF5ZXIgPSBuZXcgS29udmEuTGF5ZXIoewogICAgICBpZDogImZyZWVfZHJhd19sYXllciIsCiAgICAgIGJhY2tncm91bmRDb2xvcjogInJlZCIKICAgIH0pOwoKICAgIHRoaXMuc3RhZ2UuYWRkKHRoaXMuYmdJbWdMYXllcik7CiAgICB0aGlzLnN0YWdlLmFkZCh0aGlzLmZyZWVEcmF3TGF5ZXIpOwoKICAgIHRoaXMuYWRkRXZlbnQoKTsKCiAgICAvLyDnu4Too4XmlbDmja7moLzlvI8KICAgIHRoaXMuaW1hZ2VMaXN0ID0gdGhpcy5pbWFnZUxpc3QubWFwKChkKSA9PiB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaXNSZW5kZXI6IGZhbHNlLAogICAgICAgIHVybDogZAogICAgICB9OwogICAgfSk7CiAgICB0aGlzLnRvTmV4dCgpOwogICAgLy8gdGhpcy5pbml0RnJlZURyYXdDYW52YXMoKTsKICAgIC8vIHRoaXMuKCk7CgogICAgLy8g5Yid5aeL5YyW5pe25YCZ6ZyA6KaB5byC5q2lCiAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHt9LCAxMDApOwogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG1vZGU6ICJicnVzaCIsCiAgICAgIGlzTW92aW5nQmdJbWc6IGZhbHNlLAogICAgICB6b29tU3RlcDogMC4xLAogICAgICBzdGFnZTogbnVsbCwKICAgICAgaW1nVXJsOiBudWxsLAogICAgICBpbWFnZUxpc3Q6IGltYWdlTGlzdCwKICAgICAgY3VyckluZGV4OiAtMSwKICAgICAgY3Vyckl0ZW06IG51bGwsCiAgICAgIGl0ZW1MaXN0OiBbXSwKICAgICAgY29uV0g6IHsgd2lkdGg6IDgwMCwgaGVpZ2h0OiA2MDAgfSwKICAgICAgZnJlZURyYXdMYXllcjogbnVsbCwKICAgICAgYmdJbWdMYXllcjogbnVsbCwKICAgICAgaXNTd2l0Y2hpbmc6IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcG9uZW50czoge30KfTsK"},{"version":3,"sources":["konva.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"konva.vue","sourceRoot":"src/page","sourcesContent":["<template>\n  <div>\n    <div id=\"image-decorator-wrap\">\n      <div id=\"image-canvas\"></div>\n    </div>\n\n    <select id=\"tool\">\n      <option value=\"brush\">Brush</option>\n      <option value=\"eraser\">Eraser</option>\n    </select>\n    <button @click=\"switchMode('brush')\">画笔模式</button>\n    <button @click=\"switchMode('eraser')\">橡皮擦模式</button>\n    <button @click=\"switchMode('moveobject')\">移动背景图片</button>\n    <button @click=\"switchMode('reset')\">重置</button>\n    <img :src=\"imgUrl\" class=\"img\" />\n    <button @click=\"toDataUrl\">点我下载</button>\n    <button @click=\"toNext\">下一张</button>\n    <button @click=\"toPrev\">上一张</button>\n    <button>{{ currIndex }}</button>\n    <button @click=\"setZoom('out')\">放大</button>\n    <button @click=\"setZoom('in')\">缩小</button>\n    <button @click=\"rotateTo('left')\">向左</button>\n    <button @click=\"rotateTo('right')\">向右</button>\n  </div>\n</template>\n\n<script>\nimport Konva from \"konva\";\nimport { imageList } from \"./util.js\";\nimport Item from \"./Item.js\";\n\nconst C_WIDTH = 800;\nconst C_HEIGHT = 600;\nconst methods = {\n  // 切换图片复原操作\n\n  // 切换工具栏模式\n  switchMode(mode) {\n    this.mode = mode;\n    if (mode === \"brush\" || mode === \"eraser\") {\n      this.addEvent();\n      this.currItem.bgImg.draggable(false);\n    }\n    if (mode === \"moveobject\") {\n      this.removeStageEvents();\n      this.setCursorStyle(\"pointer\");\n      this.currItem.bgImg.draggable(true);\n    }\n\n    if (mode === \"reset\") {\n      let state = this.currItem.getOriginState();\n      this.loadCanvasFromJSON(JSON.parse(state));\n      this.currItem.clearHistorylist();\n      this.currItem.save(JSON.parse(state));\n      this.switchMode(\"brush\")\n    }\n  },\n  // 设置鼠标样式\n  setCursorStyle(type) {\n    switch (type) {\n      case \"pointer\":\n        document.body.style.cursor = \"pointer\";\n        break;\n      case \"default\":\n        document.body.style.cursor = \"pointer\";\n        break;\n      default:\n        document.body.style.cursor = \"pointer\";\n        break;\n    }\n  },\n  // 设置背景图片移动\n  moveBgImg() {\n    // console.log(\"this.stage\", this.stage, this.stage.listening);\n    // this.stage.listening(false);\n    // this.isMovingBgImg = true;\n    this.removeStageEvents();\n    this.currItem.bgImg.draggable(true);\n    this.setCursorStyle(\"pointer\");\n  },\n  // 旋转\n  rotateTo(type) {\n    if (type === \"left\") {\n      this.stage.rotation(-90);\n    }\n    if (type === \"right\") {\n      this.stage.rotation(90);\n    }\n    this.stage.batchDraw();\n  },\n  // \n  setZoom(type) {\n    let zoom = this.stage.getAttr(\"scaleX\") || 1;\n    if (type == \"out\") {\n      // 放大\n      zoom = zoom + this.zoomStep;\n      zoom = Math.min(3, zoom); //最大是原来的3倍\n    }\n    if (type === \"in\") {\n      zoom = zoom - this.zoomStep;\n      zoom = Math.max(0.1, zoom); //最小为原来的1/10\n    }\n    this.stage.scale({\n      x: zoom,\n      y: zoom\n    });\n    this.stage.batchDraw();\n  },\n  // 移除stage事件监听\n  removeStageEvents() {\n    this.stage.off(\"mousedown\");\n    this.stage.off(\"mousemove\");\n    this.stage.off(\"mouseup\");\n  },\n  // 事件监听\n  addEvent() {\n    let isPaint = false;\n    let lastLine;\n    this.stage.on(\"mousedown\", () => {\n      isPaint = true;\n      let pos = this.stage.getPointerPosition();\n      let oldScale = this.stage.scaleX();\n      lastLine = new Konva.Line({\n        stroke: \"#df4b26\",\n        strokeWidth: 5,\n        globalCompositeOperation:\n          this.mode === \"brush\" ? \"source-over\" : \"destination-out\",\n        points: [\n          pos.x / oldScale - this.stage.x() / oldScale,\n          pos.y / oldScale - this.stage.y() / oldScale\n        ]\n      });\n      this.freeDrawLayer.add(lastLine);\n    });\n    this.stage.on(\"mouseup\", () => {\n      isPaint = false;\n      this.saveCurrItemState();\n    });\n    this.stage.on(\"mousemove\", () => {\n      let oldScale = this.stage.scaleX();\n      if (!isPaint) {\n        return;\n      }\n      // 确保缩放功能能正常使用\n      const pos = this.stage.getPointerPosition();\n      let newPoints = lastLine\n        .points()\n        .concat([\n          pos.x / oldScale - this.stage.x() / oldScale,\n          pos.y / oldScale - this.stage.y() / oldScale\n        ]);\n      lastLine.points(newPoints);\n      this.freeDrawLayer.batchDraw();\n    });\n  },\n  // 反序列化\n  loadCanvasFromJSON(state) {\n    if (!state) return;\n    this.stage = Konva.Node.create(state, \"image-canvas\");\n    // 添加背景图\n    // 背景图片不会保存在JSON对象里\n    this.bgImgLayer = this.stage.getLayers()[0];\n    this.bgImgLayer.add(this.currItem.bgImg)\n    this.bgImgLayer.batchDraw();\n    // this.bgImgLayer.batchDraw();\n    this.freeDrawLayer = this.stage.getLayers()[1];\n    this.freeDrawLayer.batchDraw();\n    this.isSwitching = false;\n\n  },\n  saveCurrItemState() {\n    if (!this.currItem) return;\n    let state = this.stage.toJSON();\n    this.currItem.save(state);\n  },\n  toNext() {\n    // this.saveCurrItemState();\n    this.switchImage(this.currIndex + 1);\n  },\n  toPrev() {\n    // this.saveCurrItemState();\n    this.switchImage(this.currIndex - 1);\n  },\n  toDataUrl() {\n    this.imgUrl = this.stage.toDataURL({\n      x: 0,\n      y: 0,\n      width: C_WIDTH,\n      height: C_HEIGHT,\n      pixelRatio: 1, // 图片质量\n    });\n  },\n  // 加载背景图片\n  loadBackImage(itemObj) {\n    return new Promise((reslove) => {\n      const { imageInfo } = itemObj;\n      const { scale } = imageInfo;\n      Konva.Image.fromURL(itemObj.originUrl, (kImg) => {\n        kImg.setAttrs({\n          // 设置居中\n          x: this.getBgImgXYOffset(scale.width, null),\n          y: this.getBgImgXYOffset(null, scale.height),\n          id: \"bgImg\",\n          draggable: false,\n          source: itemObj.originUrl,\n          width: scale.width,\n          height: scale.height\n        });\n        this.bgImgLayer.add(kImg);\n        this.bgImgLayer.batchDraw();\n        this.currItem.bgImg = kImg;\n        reslove();\n        // cb && cb();\n      });\n    })\n  },\n  // 获取背景图片xy偏移量\n  getBgImgXYOffset(width, height) {\n    if (width) {\n      return C_WIDTH > width ? (C_WIDTH - width) / 2 : 0;\n    }\n    if (height) {\n      return C_HEIGHT > height ? (C_HEIGHT - height) / 2 : 0;\n    }\n  },\n\n  afterSwitch(index, itemObj, isFirstRender = false) {\n    if (isFirstRender) {\n      // 首次渲染;\n      if (!this.bgImgLayer) {\n        let bgImgLayer = new Konva.Layer();\n        this.bgImgLayer = bgImgLayer;\n        this.loadBackImage(itemObj, this.initFreeDrawCanvas);\n      } else {\n        this.bgImgLayer && this.bgImgLayer.removeChildren();\n        this.loadBackImage(itemObj).then(() => {\n          this.saveCurrItemState();\n        });\n      \n      }\n      this.clearFreeDrawLayer();\n      this.isSwitching = false;\n    }\n  },\n  // 设置stage宽高\n  setStageWH(w, h) {\n    this.stage.width(w);\n    this.stage.height(h);\n  },\n  // 清除画笔层\n  clearFreeDrawLayer() {\n    if (this.freeDrawLayer) {\n      this.freeDrawLayer.removeChildren();\n      this.freeDrawLayer.draw();\n    }\n  },\n  // 切换图层\n  switchImage(index) {\n    console.log(\"=====switchImage=====\", index);\n    if (index < -1) return;\n    if (this.isSwitching) return;\n    let img = this.imageList[index];\n    if (!img) {\n      console.warn(\"图片不存在\");\n      return;\n    }\n    let itemObj;\n    if (img && !img.isRender) {\n      this.isSwitching = true;\n      // 首次渲染\n      itemObj = new Item(\n        {\n          url: this.imageList[index].url,\n          conWH: { width: 800, height: 600 }\n        },\n        () => this.afterSwitch(index, itemObj, true)\n      );\n      console.log(\"====首次渲染=====\")\n      this.currIndex = index;\n      this.currItem = itemObj;\n      this.itemList[this.currIndex] = itemObj;\n      this.$set(this.imageList, index, Object.assign({}, {...this.imageList[index]}, {isRender: true}))\n    } else {\n      this.isSwitching = true;\n      this.currIndex = index;\n      // 非首次渲染\n      console.log(\"======非首次渲染=====\");\n      this.currItem = this.itemList[this.currIndex];\n      let lastState = this.currItem.getLastState();\n      this.loadCanvasFromJSON(JSON.parse(lastState));\n    }\n  }\n};\nexport default {\n  methods,\n  mounted() {\n    // first we need Konva core things: stage and layer\n    let stage = new Konva.Stage({\n      container: \"image-canvas\",\n      scaleY: 1,\n      scaleX: 1,\n      centeredScaling: true,\n      // 确定了canvas的宽高\n      width: 800,\n      height: 600\n    });\n\n    this.stage = stage;\n\n    // 背景层\n    this.bgImgLayer = new Konva.Layer({\n      id: \"bg_image_layer\"\n    });\n\n    // 绘画层\n    this.freeDrawLayer = new Konva.Layer({\n      id: \"free_draw_layer\",\n      backgroundColor: \"red\"\n    });\n\n    this.stage.add(this.bgImgLayer);\n    this.stage.add(this.freeDrawLayer);\n\n    this.addEvent();\n\n    // 组装数据格式\n    this.imageList = this.imageList.map((d) => {\n      return {\n        isRender: false,\n        url: d\n      };\n    });\n    this.toNext();\n    // this.initFreeDrawCanvas();\n    // this.();\n\n    // 初始化时候需要异步\n    // setTimeout(() => {}, 100);\n  },\n  data() {\n    return {\n      mode: \"brush\",\n      isMovingBgImg: false,\n      zoomStep: 0.1,\n      stage: null,\n      imgUrl: null,\n      imageList: imageList,\n      currIndex: -1,\n      currItem: null,\n      itemList: [],\n      conWH: { width: 800, height: 600 },\n      freeDrawLayer: null,\n      bgImgLayer: null,\n      isSwitching: false\n    };\n  },\n  components: {}\n};\n</script>\n\n<style lang=\"less\" scoped>\n#image-decorator-wrap {\n  border: 1px solid red;\n  width: 800px;\n  height: 600px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  overflow: hidden;\n\n  #image-canvas {\n    border: 1px solid yellow;\n  }\n  .img {\n    margin-top: 20px;\n    border: 1px solid blue;\n  }\n}\n</style>\n"]}]}