{"remainingRequest":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/Konva/ImgDecorator.vue?vue&type=style&index=0&id=3ab5c0c9&lang=less&scoped=true&","dependencies":[{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/src/page/Konva/ImgDecorator.vue","mtime":1612505420630},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/css-loader/dist/cjs.js","mtime":1594608463058},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610942723088},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/postcss-loader/src/index.js","mtime":1591149286800},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/less-loader/dist/cjs.js","mtime":1597049187587},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/cache-loader/dist/cjs.js","mtime":1591588454175},{"path":"/Users/haopeiwei/Documents/hpw/web-board/konva-board/node_modules/vue-loader/lib/index.js","mtime":1610942723088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojaW1hZ2UtZGVjb3JhdG9yLXdyYXAgewogIC8vIGJvcmRlcjogMXB4IHNvbGlkIHJlZDsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIG1hcmdpbjogMCBhdXRvOwogIG92ZXJmbG93OiBoaWRkZW47CiAgYmFja2dyb3VuZDogI2ZmZjsKICAvLyBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoCiAgLy8gICAgIDQ1ZGVnLAogIC8vICAgICAjY2NjIDI1JSwKICAvLyAgICAgdHJhbnNwYXJlbnQgMjUlLAogIC8vICAgICB0cmFuc3BhcmVudCA3NSUsCiAgLy8gICAgICNjY2MgNzUlLAogIC8vICAgICAjY2NjCiAgLy8gICApLAogIC8vICAgbGluZWFyLWdyYWRpZW50KAogIC8vICAgICA0NWRlZywKICAvLyAgICAgI2NjYyAyNSUsCiAgLy8gICAgIHRyYW5zcGFyZW50IDI1JSwKICAvLyAgICAgdHJhbnNwYXJlbnQgNzUlLAogIC8vICAgICAjY2NjIDc1JSwKICAvLyAgICAgI2NjYwogIC8vICAgKTsKICAvLyBiYWNrZ3JvdW5kLXNpemU6IDI0cHggMjRweDsKICAvLyBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwIDAsIDEycHggMTJweDsKICAvLyAjaW1hZ2UtY2FudmFzIHsKICAvLyAgIGJvcmRlcjogMXB4IHNvbGlkIHllbGxvdzsKICAvLyB9CiAgLy8gLmltZyB7CiAgLy8gICBtYXJnaW4tdG9wOiAyMHB4OwogIC8vICAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTsKICAvLyB9Cn0K"},{"version":3,"sources":["ImgDecorator.vue"],"names":[],"mappingsfile":"ImgDecorator.vue","sourceRoot":"src/page/Konva","sourcesContent":["<template>\n  <div>\n    <div id=\"image-decorator-wrap\" ref=\"image_decorator_wrap\">\n      <div id=\"image-canvas\"></div>\n    </div>\n\n    <div id=\"menu\">\n      <!-- <menu-color\n        @click=\"switchMode\"\n        class=\"menu_item\"\n        :colorList=\"myConfig && myConfig.colorList\"\n        :mode=\"mode\"\n        @changeConfig=\"changeConfig\"\n      >\n      </menu-color> -->\n    </div>\n    <button @click=\"switchMode('brush')\">画笔模式</button>\n    <button @click=\"switchMode('eraser')\">橡皮擦模式</button>\n    <button @click=\"switchMode('moveobject')\">移动背景图片</button>\n    <button @click=\"switchMode('reset')\">重置</button>\n    <img :src=\"imgUrl\" class=\"img\" />\n    <button @click=\"toDataUrl\">点我下载</button>\n    <button @click=\"toNext\">下一张</button>\n    <button @click=\"toPrev\">上一张</button>\n    <button>{{ currIndex }}</button>\n    <button @click=\"setZoom('out')\">放大</button>\n    <button @click=\"setZoom('in')\">缩小</button>\n    <button @click=\"rotateTo('left')\">向左</button>\n    <button @click=\"rotateTo('right')\">向右</button>\n    <el-button size=\"mini\" @click=\"preview\">预览</el-button>\n  </div>\n</template>\n\n<script>\nimport Konva from \"konva\";\nimport {\n  imageList,\n  getBgImgXYOffset,\n  C_WIDTH,\n  C_HEIGHT,\n  rotateAroundCenter\n} from \"../util.js\";\nimport Item from \"../Item.js\";\n\nconst methods = {\n  preview() {\n    this.$emit(\"preview\");\n  },\n  // 切换图片复原操作\n  // 切换工具栏模式\n  switchMode(mode) {\n    this.mode = mode;\n    if (mode === \"brush\" || mode === \"eraser\") {\n      this.addEvent();\n      this.currItem.bgImg && this.currItem.bgImg.draggable(false);\n    }\n    if (mode === \"moveobject\") {\n      this.removeStageEvents();\n      this.setCursorStyle(\"pointer\");\n      this.currItem.bgImg.draggable(true);\n    }\n\n    if (mode === \"reset\") {\n      this.currItem.setRotate(0);\n      rotateAroundCenter(this.currItem.bgImg, 0);\n      let state = this.currItem.getOriginState();\n      this.loadCanvasFromJSON(JSON.parse(state));\n      this.currItem.clearHistorylist();\n      this.currItem.save(JSON.parse(state));\n      this.switchMode(\"brush\");\n    }\n  },\n  // 设置鼠标样式\n  setCursorStyle(type) {\n    switch (type) {\n      case \"pointer\":\n        document.body.style.cursor = \"pointer\";\n        break;\n      case \"default\":\n        document.body.style.cursor = \"pointer\";\n        break;\n      default:\n        document.body.style.cursor = \"pointer\";\n        break;\n    }\n  },\n  // 设置背景图片移动\n  moveBgImg() {\n    // console.log(\"this.stage\", this.stage, this.stage.listening);\n    // this.stage.listening(false);\n    // this.isMovingBgImg = true;\n    this.removeStageEvents();\n    this.currItem.bgImg.draggable(true);\n    this.setCursorStyle(\"pointer\");\n  },\n  // 旋转\n  rotateTo(type) {\n    // 旋转时 缩放属性为1\n    this.setZoom(\"noop\");\n    this.currItem.rotateTo(type);\n    const { rotate } = this.currItem;\n    rotateAroundCenter(this.freeDrawLayer, rotate);\n    this.stage.batchDraw();\n  },\n  // 放大缩小\n  setZoom(type) {\n    let zoom;\n    if (type === \"noop\") {\n      zoom = 1;\n    } else {\n      zoom = this.stage.getAttr(\"scaleX\") || 1;\n      if (type == \"out\") {\n        // 放大\n        zoom = zoom + this.zoomStep;\n        zoom = Math.min(3, zoom); //最大是原来的3倍\n      }\n      if (type === \"in\") {\n        zoom = zoom - this.zoomStep;\n        zoom = Math.max(0.1, zoom); //最小为原来的1/10\n      }\n    }\n    this.stage.scale({\n      x: zoom,\n      y: zoom\n    });\n    this.stage.batchDraw();\n  },\n  // 移除stage事件监听\n  removeStageEvents() {\n    this.stage.off(\"mousedown\");\n    this.stage.off(\"mousemove\");\n    this.stage.off(\"mouseup\");\n  },\n  // 事件监听\n  addEvent() {\n    let isPaint = false;\n    let lastLine;\n    this.stage.on(\"mousedown\", () => {\n      isPaint = true;\n      let pos = this.stage.getPointerPosition();\n      let oldScale = this.stage.scaleX();\n      lastLine = new Konva.Line({\n        stroke: \"#df4b26\",\n        strokeWidth: 5,\n        globalCompositeOperation:\n          this.mode === \"brush\" ? \"source-over\" : \"destination-out\",\n        points: [\n          pos.x / oldScale - this.stage.x() / oldScale,\n          pos.y / oldScale - this.stage.y() / oldScale\n        ]\n      });\n      this.freeDrawLayer.add(lastLine);\n    });\n    this.stage.on(\"mouseup\", () => {\n      isPaint = false;\n      this.saveCurrItemState();\n    });\n    this.stage.on(\"mousemove\", () => {\n      let oldScale = this.stage.scaleX();\n      if (!isPaint) {\n        return;\n      }\n      // 确保缩放功能能正常使用\n      const pos = this.stage.getPointerPosition();\n      let newPoints = lastLine\n        .points()\n        .concat([\n          pos.x / oldScale - this.stage.x() / oldScale,\n          pos.y / oldScale - this.stage.y() / oldScale\n        ]);\n      lastLine.points(newPoints);\n      this.freeDrawLayer.batchDraw();\n    });\n  },\n  // 反序列化\n  loadCanvasFromJSON(state) {\n    if (!state) return;\n    this.stage = Konva.Node.create(state, \"image-canvas\");\n    // 添加背景图\n    // 背景图片不会保存在JSON对象里\n    this.bgImgLayer = this.stage.getLayers()[0];\n    this.bgImgLayer.add(this.currItem.bgImg);\n    this.bgImgLayer.batchDraw();\n    // this.bgImgLayer.batchDraw();\n    this.freeDrawLayer = this.stage.getLayers()[1];\n    this.freeDrawLayer.batchDraw();\n    this.isSwitching = false;\n  },\n  saveCurrItemState() {\n    if (!this.currItem) return;\n    let state = this.stage.toJSON();\n    this.currItem.save(state);\n  },\n  toNext() {\n    // this.saveCurrItemState();\n    this.switchImage(this.currIndex + 1);\n  },\n  toPrev() {\n    // this.saveCurrItemState();\n    this.switchImage(this.currIndex - 1);\n  },\n  toDataUrl() {\n    const imgUrl = this.stage.toDataURL({\n      x: 0,\n      y: 0,\n      width: C_WIDTH,\n      height: C_HEIGHT,\n      pixelRatio: 1 // 图片质量\n    });\n\n    this.$emit(\"emitLoadImg\", imgUrl);\n  },\n  // 加载背景图片\n  loadBackImage(itemObj) {\n    return new Promise((reslove) => {\n      const { imageInfo } = itemObj;\n      const { scale } = imageInfo;\n      Konva.Image.fromURL(itemObj.originUrl, (kImg) => {\n        kImg.setAttrs({\n          // 设置居中\n          x: getBgImgXYOffset(scale.width, null, this.C_WIDTH, 700),\n          y: getBgImgXYOffset(null, scale.height, this.C_WIDTH, 700),\n          id: \"bgImg\",\n          draggable: false,\n          source: itemObj.originUrl,\n          width: scale.width,\n          height: scale.height\n        });\n        this.bgImgLayer.add(kImg);\n        this.bgImgLayer.batchDraw();\n        this.currItem.bgImg = kImg;\n        reslove();\n      });\n    });\n  },\n\n  afterSwitch(index, itemObj, isFirstRender = false) {\n    if (isFirstRender) {\n      // 首次渲染;\n      if (!this.bgImgLayer) {\n        let bgImgLayer = new Konva.Layer();\n        this.bgImgLayer = bgImgLayer;\n        this.loadBackImage(itemObj, this.initFreeDrawCanvas);\n      } else {\n        this.bgImgLayer && this.bgImgLayer.removeChildren();\n        this.loadBackImage(itemObj).then(() => {\n          this.saveCurrItemState();\n        });\n      }\n      this.clearFreeDrawLayer();\n      this.isSwitching = false;\n    }\n  },\n  // 设置stage宽高\n  setStageWH(w, h) {\n    this.stage.width(w);\n    this.stage.height(h);\n  },\n  // 清除画笔层\n  clearFreeDrawLayer() {\n    if (this.freeDrawLayer) {\n      this.freeDrawLayer.removeChildren();\n      this.freeDrawLayer.draw();\n    }\n  },\n  // 切换图层\n  switchImage(index) {\n    console.log(\"=====switchImage=====\", index);\n    if (index < -1) return;\n    if (this.isSwitching) return;\n    let img = this.imageList[index];\n    if (!img) {\n      console.warn(\"图片不存在\");\n      return;\n    }\n    let itemObj;\n    if (img && !img.isRender) {\n      this.isSwitching = true;\n      // 首次渲染\n      itemObj = new Item(\n        {\n          url: this.imageList[index].url,\n          conWH: { width: this.C_WIDTH, height: 700 }\n        },\n        () => this.afterSwitch(index, itemObj, true)\n      );\n      console.log(\"====首次渲染=====\");\n      this.currIndex = index;\n      this.currItem = itemObj;\n      this.itemList[this.currIndex] = itemObj;\n      this.$set(\n        this.imageList,\n        index,\n        Object.assign({}, { ...this.imageList[index] }, { isRender: true })\n      );\n    } else {\n      this.isSwitching = true;\n      this.currIndex = index;\n      // 非首次渲染\n      console.log(\"======非首次渲染=====\");\n      this.currItem = this.itemList[this.currIndex];\n      let lastState = this.currItem.getLastState();\n      console.log(\"lastState\", lastState);\n      this.loadCanvasFromJSON(JSON.parse(lastState));\n    }\n    this.setZoom(\"noop\");\n    this.switchMode(\"brush\");\n  }\n};\nexport default {\n  methods,\n  mounted() {\n    const { width } = this.$refs.image_decorator_wrap.getBoundingClientRect();\n    // first we need Konva core things: stage and layer\n    let stage = new Konva.Stage({\n      container: \"image-canvas\",\n      scaleY: 1,\n      scaleX: 1,\n      centeredScaling: true,\n      // 确定了canvas的宽高\n      width,\n      height: 700\n      // draggable: true\n    });\n\n    this.C_WIDTH = width;\n    this.stage = stage;\n\n    // 背景层\n    this.bgImgLayer = new Konva.Layer({\n      id: \"bg_image_layer\"\n    });\n\n    // 绘画层\n    this.freeDrawLayer = new Konva.Layer({\n      id: \"free_draw_layer\",\n      backgroundColor: \"red\"\n    });\n\n    this.stage.add(this.bgImgLayer);\n    this.stage.add(this.freeDrawLayer);\n\n    this.addEvent();\n\n    // 组装数据格式\n    this.imageList = this.imageList.map((d) => {\n      return {\n        isRender: false,\n        url: d\n      };\n    });\n    this.toNext();\n    // this.initFreeDrawCanvas();\n    // this.();\n\n    // 初始化时候需要异步\n    // setTimeout(() => {}, 100);\n  },\n  data() {\n    return {\n      mode: \"brush\",\n      isMovingBgImg: false,\n      zoomStep: 0.1,\n      stage: null,\n      imgUrl: null,\n      imageList: imageList,\n      currIndex: -1,\n      currItem: null,\n      itemList: [],\n      conWH: { width: 800, height: 600 },\n      freeDrawLayer: null,\n      bgImgLayer: null,\n      isSwitching: false\n    };\n  },\n  components: {}\n};\n</script>\n\n<style lang=\"less\" scoped>\n#image-decorator-wrap {\n  // border: 1px solid red;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  overflow: hidden;\n  background: #fff;\n  // background-image: linear-gradient(\n  //     45deg,\n  //     #ccc 25%,\n  //     transparent 25%,\n  //     transparent 75%,\n  //     #ccc 75%,\n  //     #ccc\n  //   ),\n  //   linear-gradient(\n  //     45deg,\n  //     #ccc 25%,\n  //     transparent 25%,\n  //     transparent 75%,\n  //     #ccc 75%,\n  //     #ccc\n  //   );\n  // background-size: 24px 24px;\n  // background-position: 0 0, 12px 12px;\n  // #image-canvas {\n  //   border: 1px solid yellow;\n  // }\n  // .img {\n  //   margin-top: 20px;\n  //   border: 1px solid blue;\n  // }\n}\n</style>\n"]}]}